
stm32g030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000438  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004f4  080004fc  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080004f4  080004f4  000014fc  2**0
                  CONTENTS
  4 .ARM          00000000  080004f4  080004f4  000014fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080004f4  080004fc  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080004f4  080004f4  000014f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080004f8  080004f8  000014f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000014fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080004fc  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080004fc  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000081b  00000000  00000000  00001524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000023c  00000000  00000000  00001d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000b8  00000000  00000000  00001f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000007e  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000008f6  00000000  00000000  000020b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000044d  00000000  00000000  000029ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00002df9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000001cc  00000000  00000000  00002e3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  00003008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080004dc 	.word	0x080004dc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080004dc 	.word	0x080004dc

08000104 <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing the configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000104:	b590      	push	{r4, r7, lr}
 8000106:	b085      	sub	sp, #20
 8000108:	af00      	add	r7, sp, #0
 800010a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temporary register variable
 800010c:	2300      	movs	r3, #0
 800010e:	60fb      	str	r3, [r7, #12]

	// Configure GPIO Mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode <= GPIO_MODE_ANALOG) {
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	795b      	ldrb	r3, [r3, #5]
 8000114:	2b03      	cmp	r3, #3
 8000116:	d81f      	bhi.n	8000158 <GPIO_Init+0x54>
		// Non-interrupt mode (Input, Output, Alternate Function, Analog)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000118:	687b      	ldr	r3, [r7, #4]
 800011a:	795b      	ldrb	r3, [r3, #5]
 800011c:	001a      	movs	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800011e:	687b      	ldr	r3, [r7, #4]
 8000120:	791b      	ldrb	r3, [r3, #4]
 8000122:	005b      	lsls	r3, r3, #1
 8000124:	409a      	lsls	r2, r3
 8000126:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000128:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800012a:	687b      	ldr	r3, [r7, #4]
 800012c:	681b      	ldr	r3, [r3, #0]
 800012e:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear MODER bits
 8000130:	687b      	ldr	r3, [r7, #4]
 8000132:	791b      	ldrb	r3, [r3, #4]
 8000134:	005b      	lsls	r3, r3, #1
 8000136:	2103      	movs	r1, #3
 8000138:	4099      	lsls	r1, r3
 800013a:	000b      	movs	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800013c:	43db      	mvns	r3, r3
 800013e:	0019      	movs	r1, r3
 8000140:	687b      	ldr	r3, [r7, #4]
 8000142:	681b      	ldr	r3, [r3, #0]
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set new mode
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	681b      	ldr	r3, [r3, #0]
 800014c:	6819      	ldr	r1, [r3, #0]
 800014e:	687b      	ldr	r3, [r7, #4]
 8000150:	681b      	ldr	r3, [r3, #0]
 8000152:	68fa      	ldr	r2, [r7, #12]
 8000154:	430a      	orrs	r2, r1
 8000156:	601a      	str	r2, [r3, #0]
	} else {
		// Interrupt mode (to be implemented)
	}
	temp = 0;
 8000158:	2300      	movs	r3, #0
 800015a:	60fb      	str	r3, [r7, #12]

	// Configure GPIO Output Type
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_OUTPUT) {
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	795b      	ldrb	r3, [r3, #5]
 8000160:	2b01      	cmp	r3, #1
 8000162:	d11d      	bne.n	80001a0 <GPIO_Init+0x9c>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	7a1b      	ldrb	r3, [r3, #8]
 8000168:	001a      	movs	r2, r3
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	791b      	ldrb	r3, [r3, #4]
 800016e:	409a      	lsls	r2, r3
 8000170:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 8000172:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	685a      	ldr	r2, [r3, #4]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear OTYPER bit
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	791b      	ldrb	r3, [r3, #4]
 800017e:	0019      	movs	r1, r3
 8000180:	2301      	movs	r3, #1
 8000182:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000184:	43db      	mvns	r3, r3
 8000186:	0019      	movs	r1, r3
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	400a      	ands	r2, r1
 800018e:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; // Set output type
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	681b      	ldr	r3, [r3, #0]
 8000194:	6859      	ldr	r1, [r3, #4]
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	68fa      	ldr	r2, [r7, #12]
 800019c:	430a      	orrs	r2, r1
 800019e:	605a      	str	r2, [r3, #4]
	}
	temp = 0;
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]

	// Configure GPIO Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	799b      	ldrb	r3, [r3, #6]
 80001a8:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	791b      	ldrb	r3, [r3, #4]
 80001ae:	005b      	lsls	r3, r3, #1
 80001b0:	409a      	lsls	r2, r3
 80001b2:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 80001b4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear OSPEEDR bits
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	791b      	ldrb	r3, [r3, #4]
 80001c0:	005b      	lsls	r3, r3, #1
 80001c2:	2103      	movs	r1, #3
 80001c4:	4099      	lsls	r1, r3
 80001c6:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 80001c8:	43db      	mvns	r3, r3
 80001ca:	0019      	movs	r1, r3
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	400a      	ands	r2, r1
 80001d2:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Set speed
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	6899      	ldr	r1, [r3, #8]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	68fa      	ldr	r2, [r7, #12]
 80001e0:	430a      	orrs	r2, r1
 80001e2:	609a      	str	r2, [r3, #8]
	temp = 0;
 80001e4:	2300      	movs	r3, #0
 80001e6:	60fb      	str	r3, [r7, #12]

	// Configure GPIO Pull-up/Pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	79db      	ldrb	r3, [r3, #7]
 80001ec:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	791b      	ldrb	r3, [r3, #4]
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	409a      	lsls	r2, r3
 80001f6:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 80001f8:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear PUPDR bits
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	791b      	ldrb	r3, [r3, #4]
 8000204:	005b      	lsls	r3, r3, #1
 8000206:	2103      	movs	r1, #3
 8000208:	4099      	lsls	r1, r3
 800020a:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 800020c:	43db      	mvns	r3, r3
 800020e:	0019      	movs	r1, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	400a      	ands	r2, r1
 8000216:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // Set pull-up/pull-down configuration
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	68d9      	ldr	r1, [r3, #12]
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	430a      	orrs	r2, r1
 8000226:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]

	// Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_AF){
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	795b      	ldrb	r3, [r3, #5]
 8000230:	2b02      	cmp	r3, #2
 8000232:	d124      	bne.n	800027e <GPIO_Init+0x17a>
		uint8_t regIdx, pinPos;
		regIdx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	791a      	ldrb	r2, [r3, #4]
 8000238:	240b      	movs	r4, #11
 800023a:	193b      	adds	r3, r7, r4
 800023c:	08d2      	lsrs	r2, r2, #3
 800023e:	701a      	strb	r2, [r3, #0]
		pinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	791a      	ldrb	r2, [r3, #4]
 8000244:	200a      	movs	r0, #10
 8000246:	183b      	adds	r3, r7, r0
 8000248:	2107      	movs	r1, #7
 800024a:	400a      	ands	r2, r1
 800024c:	701a      	strb	r2, [r3, #0]
		pGPIOHandle->pGPIOx->AFR[regIdx] |= (pGPIOHandle->GPIO_PinConfig.GPIO_AltFunction << (4 * pinPos));
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	193a      	adds	r2, r7, r4
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	3208      	adds	r2, #8
 8000258:	0092      	lsls	r2, r2, #2
 800025a:	58d1      	ldr	r1, [r2, r3]
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	7a5b      	ldrb	r3, [r3, #9]
 8000260:	001a      	movs	r2, r3
 8000262:	183b      	adds	r3, r7, r0
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	009b      	lsls	r3, r3, #2
 8000268:	409a      	lsls	r2, r3
 800026a:	0013      	movs	r3, r2
 800026c:	0018      	movs	r0, r3
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	193a      	adds	r2, r7, r4
 8000274:	7812      	ldrb	r2, [r2, #0]
 8000276:	4301      	orrs	r1, r0
 8000278:	3208      	adds	r2, #8
 800027a:	0092      	lsls	r2, r2, #2
 800027c:	50d1      	str	r1, [r2, r3]
	}
}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	b005      	add	sp, #20
 8000284:	bd90      	pop	{r4, r7, pc}
	...

08000288 <GPIO_PeriClkCtrl>:
 * @brief  Enables or disables the clock for the specified GPIO peripheral.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  en: Enable/disable flag (1 to enable, 0 to disable).
 * @retval None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t en){
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
 8000290:	000a      	movs	r2, r1
 8000292:	1cfb      	adds	r3, r7, #3
 8000294:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 8000296:	1cfb      	adds	r3, r7, #3
 8000298:	781b      	ldrb	r3, [r3, #0]
 800029a:	2b01      	cmp	r3, #1
 800029c:	d137      	bne.n	800030e <GPIO_PeriClkCtrl+0x86>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_EN();
 800029e:	687a      	ldr	r2, [r7, #4]
 80002a0:	23a0      	movs	r3, #160	@ 0xa0
 80002a2:	05db      	lsls	r3, r3, #23
 80002a4:	429a      	cmp	r2, r3
 80002a6:	d106      	bne.n	80002b6 <GPIO_PeriClkCtrl+0x2e>
 80002a8:	4b36      	ldr	r3, [pc, #216]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ac:	4b35      	ldr	r3, [pc, #212]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002ae:	2101      	movs	r1, #1
 80002b0:	430a      	orrs	r2, r1
 80002b2:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
	}
}
 80002b4:	e062      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4a33      	ldr	r2, [pc, #204]	@ (8000388 <GPIO_PeriClkCtrl+0x100>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d106      	bne.n	80002cc <GPIO_PeriClkCtrl+0x44>
 80002be:	4b31      	ldr	r3, [pc, #196]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002c2:	4b30      	ldr	r3, [pc, #192]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002c4:	2102      	movs	r1, #2
 80002c6:	430a      	orrs	r2, r1
 80002c8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002ca:	e057      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	4a2f      	ldr	r2, [pc, #188]	@ (800038c <GPIO_PeriClkCtrl+0x104>)
 80002d0:	4293      	cmp	r3, r2
 80002d2:	d106      	bne.n	80002e2 <GPIO_PeriClkCtrl+0x5a>
 80002d4:	4b2b      	ldr	r3, [pc, #172]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002da:	2104      	movs	r1, #4
 80002dc:	430a      	orrs	r2, r1
 80002de:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002e0:	e04c      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000390 <GPIO_PeriClkCtrl+0x108>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d106      	bne.n	80002f8 <GPIO_PeriClkCtrl+0x70>
 80002ea:	4b26      	ldr	r3, [pc, #152]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80002ee:	4b25      	ldr	r3, [pc, #148]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 80002f0:	2108      	movs	r1, #8
 80002f2:	430a      	orrs	r2, r1
 80002f4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80002f6:	e041      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <GPIO_PeriClkCtrl+0x10c>)
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d13d      	bne.n	800037c <GPIO_PeriClkCtrl+0xf4>
 8000300:	4b20      	ldr	r3, [pc, #128]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000304:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000306:	2120      	movs	r1, #32
 8000308:	430a      	orrs	r2, r1
 800030a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800030c:	e036      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_DI();
 800030e:	687a      	ldr	r2, [r7, #4]
 8000310:	23a0      	movs	r3, #160	@ 0xa0
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	429a      	cmp	r2, r3
 8000316:	d106      	bne.n	8000326 <GPIO_PeriClkCtrl+0x9e>
 8000318:	4b1a      	ldr	r3, [pc, #104]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 800031a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800031c:	4b19      	ldr	r3, [pc, #100]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 800031e:	2101      	movs	r1, #1
 8000320:	438a      	bics	r2, r1
 8000322:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000324:	e02a      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a17      	ldr	r2, [pc, #92]	@ (8000388 <GPIO_PeriClkCtrl+0x100>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClkCtrl+0xb4>
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000330:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000334:	2102      	movs	r1, #2
 8000336:	438a      	bics	r2, r1
 8000338:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800033a:	e01f      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a13      	ldr	r2, [pc, #76]	@ (800038c <GPIO_PeriClkCtrl+0x104>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClkCtrl+0xca>
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000346:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 800034a:	2104      	movs	r1, #4
 800034c:	438a      	bics	r2, r1
 800034e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000350:	e014      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a0e      	ldr	r2, [pc, #56]	@ (8000390 <GPIO_PeriClkCtrl+0x108>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClkCtrl+0xe0>
 800035a:	4b0a      	ldr	r3, [pc, #40]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 800035c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800035e:	4b09      	ldr	r3, [pc, #36]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000360:	2108      	movs	r1, #8
 8000362:	438a      	bics	r2, r1
 8000364:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000366:	e009      	b.n	800037c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a0a      	ldr	r2, [pc, #40]	@ (8000394 <GPIO_PeriClkCtrl+0x10c>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d105      	bne.n	800037c <GPIO_PeriClkCtrl+0xf4>
 8000370:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000372:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000374:	4b03      	ldr	r3, [pc, #12]	@ (8000384 <GPIO_PeriClkCtrl+0xfc>)
 8000376:	2120      	movs	r1, #32
 8000378:	438a      	bics	r2, r1
 800037a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800037c:	46c0      	nop			@ (mov r8, r8)
 800037e:	46bd      	mov	sp, r7
 8000380:	b002      	add	sp, #8
 8000382:	bd80      	pop	{r7, pc}
 8000384:	40021000 	.word	0x40021000
 8000388:	50000400 	.word	0x50000400
 800038c:	50000800 	.word	0x50000800
 8000390:	50000c00 	.word	0x50000c00
 8000394:	50001400 	.word	0x50001400

08000398 <GPIO_ToggleOutputPin>:
 * @brief  Toggles the logic level of a specific GPIO pin.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  pinNum: GPIO pin number (0-15)
 * @retval None
*/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNum){
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	000a      	movs	r2, r1
 80003a2:	1cfb      	adds	r3, r7, #3
 80003a4:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1 << pinNum);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	695b      	ldr	r3, [r3, #20]
 80003aa:	1cfa      	adds	r2, r7, #3
 80003ac:	7812      	ldrb	r2, [r2, #0]
 80003ae:	2101      	movs	r1, #1
 80003b0:	4091      	lsls	r1, r2
 80003b2:	000a      	movs	r2, r1
 80003b4:	405a      	eors	r2, r3
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	615a      	str	r2, [r3, #20]
}
 80003ba:	46c0      	nop			@ (mov r8, r8)
 80003bc:	46bd      	mov	sp, r7
 80003be:	b002      	add	sp, #8
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <delay>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void delay(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80003ca:	2300      	movs	r3, #0
 80003cc:	607b      	str	r3, [r7, #4]
 80003ce:	e002      	b.n	80003d6 <delay+0x12>
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	3301      	adds	r3, #1
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a03      	ldr	r2, [pc, #12]	@ (80003e8 <delay+0x24>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d9f8      	bls.n	80003d0 <delay+0xc>
}
 80003de:	46c0      	nop			@ (mov r8, r8)
 80003e0:	46c0      	nop			@ (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b002      	add	sp, #8
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	0007a11f 	.word	0x0007a11f

080003ec <main>:

int main(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b084      	sub	sp, #16
 80003f0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOB;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	4a11      	ldr	r2, [pc, #68]	@ (800043c <main+0x50>)
 80003f6:	601a      	str	r2, [r3, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2203      	movs	r2, #3
 80003fc:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2201      	movs	r2, #1
 8000402:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2201      	movs	r2, #1
 8000408:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_OpType = GPIO_OP_TYPE_PP;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClkCtrl(GPIOB, ENABLE);
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <main+0x50>)
 8000418:	2101      	movs	r1, #1
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff ff34 	bl	8000288 <GPIO_PeriClkCtrl>
	GPIO_Init(&GpioLed);
 8000420:	1d3b      	adds	r3, r7, #4
 8000422:	0018      	movs	r0, r3
 8000424:	f7ff fe6e 	bl	8000104 <GPIO_Init>

	while(1){
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_3);
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <main+0x50>)
 800042a:	2103      	movs	r1, #3
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff ffb3 	bl	8000398 <GPIO_ToggleOutputPin>
		delay();
 8000432:	f7ff ffc7 	bl	80003c4 <delay>
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_3);
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	e7f6      	b.n	8000428 <main+0x3c>
 800043a:	46c0      	nop			@ (mov r8, r8)
 800043c:	50000400 	.word	0x50000400

08000440 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000440:	480d      	ldr	r0, [pc, #52]	@ (8000478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000442:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000444:	e000      	b.n	8000448 <Reset_Handler+0x8>
 8000446:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000448:	480c      	ldr	r0, [pc, #48]	@ (800047c <LoopForever+0x6>)
  ldr r1, =_edata
 800044a:	490d      	ldr	r1, [pc, #52]	@ (8000480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800044c:	4a0d      	ldr	r2, [pc, #52]	@ (8000484 <LoopForever+0xe>)
  movs r3, #0
 800044e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000450:	e002      	b.n	8000458 <LoopCopyDataInit>

08000452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000456:	3304      	adds	r3, #4

08000458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800045a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800045c:	d3f9      	bcc.n	8000452 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	@ (8000488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000460:	4c0a      	ldr	r4, [pc, #40]	@ (800048c <LoopForever+0x16>)
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000464:	e001      	b.n	800046a <LoopFillZerobss>

08000466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000468:	3204      	adds	r2, #4

0800046a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800046a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800046c:	d3fb      	bcc.n	8000466 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800046e:	f000 f811 	bl	8000494 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000472:	f7ff ffbb 	bl	80003ec <main>

08000476 <LoopForever>:

LoopForever:
  b LoopForever
 8000476:	e7fe      	b.n	8000476 <LoopForever>
  ldr   r0, =_estack
 8000478:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800047c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000480:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000484:	080004fc 	.word	0x080004fc
  ldr r2, =_sbss
 8000488:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800048c:	2000001c 	.word	0x2000001c

08000490 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC_IRQHandler>
	...

08000494 <__libc_init_array>:
 8000494:	b570      	push	{r4, r5, r6, lr}
 8000496:	2600      	movs	r6, #0
 8000498:	4c0c      	ldr	r4, [pc, #48]	@ (80004cc <__libc_init_array+0x38>)
 800049a:	4d0d      	ldr	r5, [pc, #52]	@ (80004d0 <__libc_init_array+0x3c>)
 800049c:	1b64      	subs	r4, r4, r5
 800049e:	10a4      	asrs	r4, r4, #2
 80004a0:	42a6      	cmp	r6, r4
 80004a2:	d109      	bne.n	80004b8 <__libc_init_array+0x24>
 80004a4:	2600      	movs	r6, #0
 80004a6:	f000 f819 	bl	80004dc <_init>
 80004aa:	4c0a      	ldr	r4, [pc, #40]	@ (80004d4 <__libc_init_array+0x40>)
 80004ac:	4d0a      	ldr	r5, [pc, #40]	@ (80004d8 <__libc_init_array+0x44>)
 80004ae:	1b64      	subs	r4, r4, r5
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	42a6      	cmp	r6, r4
 80004b4:	d105      	bne.n	80004c2 <__libc_init_array+0x2e>
 80004b6:	bd70      	pop	{r4, r5, r6, pc}
 80004b8:	00b3      	lsls	r3, r6, #2
 80004ba:	58eb      	ldr	r3, [r5, r3]
 80004bc:	4798      	blx	r3
 80004be:	3601      	adds	r6, #1
 80004c0:	e7ee      	b.n	80004a0 <__libc_init_array+0xc>
 80004c2:	00b3      	lsls	r3, r6, #2
 80004c4:	58eb      	ldr	r3, [r5, r3]
 80004c6:	4798      	blx	r3
 80004c8:	3601      	adds	r6, #1
 80004ca:	e7f2      	b.n	80004b2 <__libc_init_array+0x1e>
 80004cc:	080004f4 	.word	0x080004f4
 80004d0:	080004f4 	.word	0x080004f4
 80004d4:	080004f8 	.word	0x080004f8
 80004d8:	080004f4 	.word	0x080004f4

080004dc <_init>:
 80004dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004de:	46c0      	nop			@ (mov r8, r8)
 80004e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004e2:	bc08      	pop	{r3}
 80004e4:	469e      	mov	lr, r3
 80004e6:	4770      	bx	lr

080004e8 <_fini>:
 80004e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004ee:	bc08      	pop	{r3}
 80004f0:	469e      	mov	lr, r3
 80004f2:	4770      	bx	lr
