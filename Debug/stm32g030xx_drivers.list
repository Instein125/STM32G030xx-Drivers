
stm32g030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009a0  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000a5c  08000a5c  00001a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a68  08000a68  00001a70  2**0
                  CONTENTS
  4 .ARM          00000000  08000a68  08000a68  00001a70  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a68  08000a70  00001a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a68  08000a68  00001a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a6c  08000a6c  00001a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001a70  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a70  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a70  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001a70  2**0
                  CONTENTS, READONLY
 12 .debug_info   000011ac  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000040e  00000000  00000000  00002c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  00003058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000ee  00000000  00000000  000031a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00001242  00000000  00000000  00003296  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000006f2  00000000  00000000  000044d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00004bca  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000003e0  00000000  00000000  00004c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  00004ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000a44 	.word	0x08000a44

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000a44 	.word	0x08000a44

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing the configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000116:	b087      	sub	sp, #28
 8000118:	af00      	add	r7, sp, #0
 800011a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temporary register variable
 800011c:	2300      	movs	r3, #0
 800011e:	617b      	str	r3, [r7, #20]

	// enable the peripheral clock
	GPIO_PeriClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000120:	687b      	ldr	r3, [r7, #4]
 8000122:	681b      	ldr	r3, [r3, #0]
 8000124:	2101      	movs	r1, #1
 8000126:	0018      	movs	r0, r3
 8000128:	f000 f994 	bl	8000454 <GPIO_PeriClkCtrl>

	// Configure GPIO Mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode <= GPIO_MODE_ANALOG) {
 800012c:	687b      	ldr	r3, [r7, #4]
 800012e:	795b      	ldrb	r3, [r3, #5]
 8000130:	2b03      	cmp	r3, #3
 8000132:	d820      	bhi.n	8000176 <GPIO_Init+0x62>
		// Non-interrupt mode (Input, Output, Alternate Function, Analog)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000134:	687b      	ldr	r3, [r7, #4]
 8000136:	795b      	ldrb	r3, [r3, #5]
 8000138:	001a      	movs	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800013a:	687b      	ldr	r3, [r7, #4]
 800013c:	791b      	ldrb	r3, [r3, #4]
 800013e:	005b      	lsls	r3, r3, #1
 8000140:	409a      	lsls	r2, r3
 8000142:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000144:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000146:	687b      	ldr	r3, [r7, #4]
 8000148:	681b      	ldr	r3, [r3, #0]
 800014a:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear MODER bits
 800014c:	687b      	ldr	r3, [r7, #4]
 800014e:	791b      	ldrb	r3, [r3, #4]
 8000150:	005b      	lsls	r3, r3, #1
 8000152:	2103      	movs	r1, #3
 8000154:	4099      	lsls	r1, r3
 8000156:	000b      	movs	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 8000158:	43db      	mvns	r3, r3
 800015a:	0019      	movs	r1, r3
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	681b      	ldr	r3, [r3, #0]
 8000160:	400a      	ands	r2, r1
 8000162:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set new mode
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	681b      	ldr	r3, [r3, #0]
 8000168:	6819      	ldr	r1, [r3, #0]
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	697a      	ldr	r2, [r7, #20]
 8000170:	430a      	orrs	r2, r1
 8000172:	601a      	str	r2, [r3, #0]
 8000174:	e0cd      	b.n	8000312 <GPIO_Init+0x1fe>
	} else {
		// Interrupt mode (to be implemented)
		// Configure the MODER register to input mode for the corresponding pin
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	791b      	ldrb	r3, [r3, #4]
 8000180:	005b      	lsls	r3, r3, #1
 8000182:	2103      	movs	r1, #3
 8000184:	4099      	lsls	r1, r3
 8000186:	000b      	movs	r3, r1
 8000188:	43db      	mvns	r3, r3
 800018a:	0019      	movs	r1, r3
 800018c:	687b      	ldr	r3, [r7, #4]
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	400a      	ands	r2, r1
 8000192:	601a      	str	r2, [r3, #0]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_FT){
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	795b      	ldrb	r3, [r3, #5]
 8000198:	2b04      	cmp	r3, #4
 800019a:	d117      	bne.n	80001cc <GPIO_Init+0xb8>
			//1. Config FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800019c:	4ba8      	ldr	r3, [pc, #672]	@ (8000440 <GPIO_Init+0x32c>)
 800019e:	685a      	ldr	r2, [r3, #4]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	791b      	ldrb	r3, [r3, #4]
 80001a4:	0019      	movs	r1, r3
 80001a6:	2301      	movs	r3, #1
 80001a8:	408b      	lsls	r3, r1
 80001aa:	0019      	movs	r1, r3
 80001ac:	4ba4      	ldr	r3, [pc, #656]	@ (8000440 <GPIO_Init+0x32c>)
 80001ae:	430a      	orrs	r2, r1
 80001b0:	605a      	str	r2, [r3, #4]
			// Clear the corresponding RTSR bit as We want the falling edge so to make sure
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001b2:	4ba3      	ldr	r3, [pc, #652]	@ (8000440 <GPIO_Init+0x32c>)
 80001b4:	681a      	ldr	r2, [r3, #0]
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	791b      	ldrb	r3, [r3, #4]
 80001ba:	0019      	movs	r1, r3
 80001bc:	2301      	movs	r3, #1
 80001be:	408b      	lsls	r3, r1
 80001c0:	43db      	mvns	r3, r3
 80001c2:	0019      	movs	r1, r3
 80001c4:	4b9e      	ldr	r3, [pc, #632]	@ (8000440 <GPIO_Init+0x32c>)
 80001c6:	400a      	ands	r2, r1
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	e035      	b.n	8000238 <GPIO_Init+0x124>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_RT){
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	795b      	ldrb	r3, [r3, #5]
 80001d0:	2b05      	cmp	r3, #5
 80001d2:	d117      	bne.n	8000204 <GPIO_Init+0xf0>
			//1. Config RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001d4:	4b9a      	ldr	r3, [pc, #616]	@ (8000440 <GPIO_Init+0x32c>)
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	791b      	ldrb	r3, [r3, #4]
 80001dc:	0019      	movs	r1, r3
 80001de:	2301      	movs	r3, #1
 80001e0:	408b      	lsls	r3, r1
 80001e2:	0019      	movs	r1, r3
 80001e4:	4b96      	ldr	r3, [pc, #600]	@ (8000440 <GPIO_Init+0x32c>)
 80001e6:	430a      	orrs	r2, r1
 80001e8:	601a      	str	r2, [r3, #0]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001ea:	4b95      	ldr	r3, [pc, #596]	@ (8000440 <GPIO_Init+0x32c>)
 80001ec:	685a      	ldr	r2, [r3, #4]
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	791b      	ldrb	r3, [r3, #4]
 80001f2:	0019      	movs	r1, r3
 80001f4:	2301      	movs	r3, #1
 80001f6:	408b      	lsls	r3, r1
 80001f8:	43db      	mvns	r3, r3
 80001fa:	0019      	movs	r1, r3
 80001fc:	4b90      	ldr	r3, [pc, #576]	@ (8000440 <GPIO_Init+0x32c>)
 80001fe:	400a      	ands	r2, r1
 8000200:	605a      	str	r2, [r3, #4]
 8000202:	e019      	b.n	8000238 <GPIO_Init+0x124>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_RFT){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	795b      	ldrb	r3, [r3, #5]
 8000208:	2b06      	cmp	r3, #6
 800020a:	d115      	bne.n	8000238 <GPIO_Init+0x124>
			//1. Config FTSR and RTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800020c:	4b8c      	ldr	r3, [pc, #560]	@ (8000440 <GPIO_Init+0x32c>)
 800020e:	685a      	ldr	r2, [r3, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	791b      	ldrb	r3, [r3, #4]
 8000214:	0019      	movs	r1, r3
 8000216:	2301      	movs	r3, #1
 8000218:	408b      	lsls	r3, r1
 800021a:	0019      	movs	r1, r3
 800021c:	4b88      	ldr	r3, [pc, #544]	@ (8000440 <GPIO_Init+0x32c>)
 800021e:	430a      	orrs	r2, r1
 8000220:	605a      	str	r2, [r3, #4]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000222:	4b87      	ldr	r3, [pc, #540]	@ (8000440 <GPIO_Init+0x32c>)
 8000224:	681a      	ldr	r2, [r3, #0]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	791b      	ldrb	r3, [r3, #4]
 800022a:	0019      	movs	r1, r3
 800022c:	2301      	movs	r3, #1
 800022e:	408b      	lsls	r3, r1
 8000230:	0019      	movs	r1, r3
 8000232:	4b83      	ldr	r3, [pc, #524]	@ (8000440 <GPIO_Init+0x32c>)
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
		}

	    // 2. Configure the GPIO port selection in EXTI register
	    uint8_t exti_idx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // EXTICR index (each EXTICR covers 4 pins)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	791a      	ldrb	r2, [r3, #4]
 800023c:	2313      	movs	r3, #19
 800023e:	18fb      	adds	r3, r7, r3
 8000240:	0892      	lsrs	r2, r2, #2
 8000242:	701a      	strb	r2, [r3, #0]
	    uint8_t exti_shift = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 8; // Shift for the specific pin
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	791b      	ldrb	r3, [r3, #4]
 8000248:	2203      	movs	r2, #3
 800024a:	4013      	ands	r3, r2
 800024c:	b2da      	uxtb	r2, r3
 800024e:	2312      	movs	r3, #18
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	00d2      	lsls	r2, r2, #3
 8000254:	701a      	strb	r2, [r3, #0]
	    uint8_t gpio_port_code = GPIO_BASE_TO_PORT_CODE(pGPIOHandle->pGPIOx);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681a      	ldr	r2, [r3, #0]
 800025a:	23a0      	movs	r3, #160	@ 0xa0
 800025c:	05db      	lsls	r3, r3, #23
 800025e:	429a      	cmp	r2, r3
 8000260:	d01d      	beq.n	800029e <GPIO_Init+0x18a>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	4a77      	ldr	r2, [pc, #476]	@ (8000444 <GPIO_Init+0x330>)
 8000268:	4293      	cmp	r3, r2
 800026a:	d016      	beq.n	800029a <GPIO_Init+0x186>
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a75      	ldr	r2, [pc, #468]	@ (8000448 <GPIO_Init+0x334>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d00f      	beq.n	8000296 <GPIO_Init+0x182>
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	4a74      	ldr	r2, [pc, #464]	@ (800044c <GPIO_Init+0x338>)
 800027c:	4293      	cmp	r3, r2
 800027e:	d008      	beq.n	8000292 <GPIO_Init+0x17e>
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a72      	ldr	r2, [pc, #456]	@ (8000450 <GPIO_Init+0x33c>)
 8000286:	4293      	cmp	r3, r2
 8000288:	d101      	bne.n	800028e <GPIO_Init+0x17a>
 800028a:	2305      	movs	r3, #5
 800028c:	e008      	b.n	80002a0 <GPIO_Init+0x18c>
 800028e:	23ff      	movs	r3, #255	@ 0xff
 8000290:	e006      	b.n	80002a0 <GPIO_Init+0x18c>
 8000292:	2303      	movs	r3, #3
 8000294:	e004      	b.n	80002a0 <GPIO_Init+0x18c>
 8000296:	2302      	movs	r3, #2
 8000298:	e002      	b.n	80002a0 <GPIO_Init+0x18c>
 800029a:	2301      	movs	r3, #1
 800029c:	e000      	b.n	80002a0 <GPIO_Init+0x18c>
 800029e:	2300      	movs	r3, #0
 80002a0:	2511      	movs	r5, #17
 80002a2:	197a      	adds	r2, r7, r5
 80002a4:	7013      	strb	r3, [r2, #0]

	    // Update the corresponding EXTICR register (EXTICR1 - EXTICR4)
		EXTI->EXTICR[exti_idx] &= ~(0xFF << exti_shift); // Clear existing bits
 80002a6:	4a66      	ldr	r2, [pc, #408]	@ (8000440 <GPIO_Init+0x32c>)
 80002a8:	2413      	movs	r4, #19
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	3318      	adds	r3, #24
 80002b0:	009b      	lsls	r3, r3, #2
 80002b2:	589a      	ldr	r2, [r3, r2]
 80002b4:	2612      	movs	r6, #18
 80002b6:	19bb      	adds	r3, r7, r6
 80002b8:	781b      	ldrb	r3, [r3, #0]
 80002ba:	21ff      	movs	r1, #255	@ 0xff
 80002bc:	4099      	lsls	r1, r3
 80002be:	000b      	movs	r3, r1
 80002c0:	43db      	mvns	r3, r3
 80002c2:	0018      	movs	r0, r3
 80002c4:	495e      	ldr	r1, [pc, #376]	@ (8000440 <GPIO_Init+0x32c>)
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4002      	ands	r2, r0
 80002cc:	3318      	adds	r3, #24
 80002ce:	009b      	lsls	r3, r3, #2
 80002d0:	505a      	str	r2, [r3, r1]
		EXTI->EXTICR[exti_idx] |= (gpio_port_code << exti_shift); // Set the new port code
 80002d2:	4a5b      	ldr	r2, [pc, #364]	@ (8000440 <GPIO_Init+0x32c>)
 80002d4:	193b      	adds	r3, r7, r4
 80002d6:	781b      	ldrb	r3, [r3, #0]
 80002d8:	3318      	adds	r3, #24
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	589a      	ldr	r2, [r3, r2]
 80002de:	197b      	adds	r3, r7, r5
 80002e0:	7819      	ldrb	r1, [r3, #0]
 80002e2:	19bb      	adds	r3, r7, r6
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	4099      	lsls	r1, r3
 80002e8:	000b      	movs	r3, r1
 80002ea:	0018      	movs	r0, r3
 80002ec:	4954      	ldr	r1, [pc, #336]	@ (8000440 <GPIO_Init+0x32c>)
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	4302      	orrs	r2, r0
 80002f4:	3318      	adds	r3, #24
 80002f6:	009b      	lsls	r3, r3, #2
 80002f8:	505a      	str	r2, [r3, r1]


		//3. Enable the EXTI interrupt delivery using the IMR(Interrupt Mask Register)
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002fa:	4a51      	ldr	r2, [pc, #324]	@ (8000440 <GPIO_Init+0x32c>)
 80002fc:	2380      	movs	r3, #128	@ 0x80
 80002fe:	58d3      	ldr	r3, [r2, r3]
 8000300:	687a      	ldr	r2, [r7, #4]
 8000302:	7912      	ldrb	r2, [r2, #4]
 8000304:	0011      	movs	r1, r2
 8000306:	2201      	movs	r2, #1
 8000308:	408a      	lsls	r2, r1
 800030a:	494d      	ldr	r1, [pc, #308]	@ (8000440 <GPIO_Init+0x32c>)
 800030c:	4313      	orrs	r3, r2
 800030e:	2280      	movs	r2, #128	@ 0x80
 8000310:	508b      	str	r3, [r1, r2]
	}
	temp = 0;
 8000312:	2300      	movs	r3, #0
 8000314:	617b      	str	r3, [r7, #20]

	// Configure GPIO Output Type
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_OUTPUT) {
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	795b      	ldrb	r3, [r3, #5]
 800031a:	2b01      	cmp	r3, #1
 800031c:	d11d      	bne.n	800035a <GPIO_Init+0x246>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	7a1b      	ldrb	r3, [r3, #8]
 8000322:	001a      	movs	r2, r3
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	791b      	ldrb	r3, [r3, #4]
 8000328:	409a      	lsls	r2, r3
 800032a:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 800032c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	685a      	ldr	r2, [r3, #4]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear OTYPER bit
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	0019      	movs	r1, r3
 800033a:	2301      	movs	r3, #1
 800033c:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 800033e:	43db      	mvns	r3, r3
 8000340:	0019      	movs	r1, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	400a      	ands	r2, r1
 8000348:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; // Set output type
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	6859      	ldr	r1, [r3, #4]
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	430a      	orrs	r2, r1
 8000358:	605a      	str	r2, [r3, #4]
	}
	temp = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	617b      	str	r3, [r7, #20]

	// Configure GPIO Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	799b      	ldrb	r3, [r3, #6]
 8000362:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	791b      	ldrb	r3, [r3, #4]
 8000368:	005b      	lsls	r3, r3, #1
 800036a:	409a      	lsls	r2, r3
 800036c:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 800036e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear OSPEEDR bits
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	791b      	ldrb	r3, [r3, #4]
 800037a:	005b      	lsls	r3, r3, #1
 800037c:	2103      	movs	r1, #3
 800037e:	4099      	lsls	r1, r3
 8000380:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000382:	43db      	mvns	r3, r3
 8000384:	0019      	movs	r1, r3
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	400a      	ands	r2, r1
 800038c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Set speed
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	6899      	ldr	r1, [r3, #8]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	697a      	ldr	r2, [r7, #20]
 800039a:	430a      	orrs	r2, r1
 800039c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]

	// Configure GPIO Pull-up/Pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	79db      	ldrb	r3, [r3, #7]
 80003a6:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	791b      	ldrb	r3, [r3, #4]
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	409a      	lsls	r2, r3
 80003b0:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 80003b2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear PUPDR bits
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	791b      	ldrb	r3, [r3, #4]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	2103      	movs	r1, #3
 80003c2:	4099      	lsls	r1, r3
 80003c4:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80003c6:	43db      	mvns	r3, r3
 80003c8:	0019      	movs	r1, r3
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	400a      	ands	r2, r1
 80003d0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // Set pull-up/pull-down configuration
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	68d9      	ldr	r1, [r3, #12]
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	697a      	ldr	r2, [r7, #20]
 80003de:	430a      	orrs	r2, r1
 80003e0:	60da      	str	r2, [r3, #12]
	temp = 0;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]

	// Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_AF){
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	795b      	ldrb	r3, [r3, #5]
 80003ea:	2b02      	cmp	r3, #2
 80003ec:	d124      	bne.n	8000438 <GPIO_Init+0x324>
		uint8_t regIdx, pinPos;
		regIdx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	791a      	ldrb	r2, [r3, #4]
 80003f2:	2410      	movs	r4, #16
 80003f4:	193b      	adds	r3, r7, r4
 80003f6:	08d2      	lsrs	r2, r2, #3
 80003f8:	701a      	strb	r2, [r3, #0]
		pinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	791a      	ldrb	r2, [r3, #4]
 80003fe:	200f      	movs	r0, #15
 8000400:	183b      	adds	r3, r7, r0
 8000402:	2107      	movs	r1, #7
 8000404:	400a      	ands	r2, r1
 8000406:	701a      	strb	r2, [r3, #0]
		pGPIOHandle->pGPIOx->AFR[regIdx] |= (pGPIOHandle->GPIO_PinConfig.GPIO_AltFunction << (4 * pinPos));
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	193a      	adds	r2, r7, r4
 800040e:	7812      	ldrb	r2, [r2, #0]
 8000410:	3208      	adds	r2, #8
 8000412:	0092      	lsls	r2, r2, #2
 8000414:	58d1      	ldr	r1, [r2, r3]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	7a5b      	ldrb	r3, [r3, #9]
 800041a:	001a      	movs	r2, r3
 800041c:	183b      	adds	r3, r7, r0
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	009b      	lsls	r3, r3, #2
 8000422:	409a      	lsls	r2, r3
 8000424:	0013      	movs	r3, r2
 8000426:	0018      	movs	r0, r3
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	193a      	adds	r2, r7, r4
 800042e:	7812      	ldrb	r2, [r2, #0]
 8000430:	4301      	orrs	r1, r0
 8000432:	3208      	adds	r2, #8
 8000434:	0092      	lsls	r2, r2, #2
 8000436:	50d1      	str	r1, [r2, r3]
	}
}
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	46bd      	mov	sp, r7
 800043c:	b007      	add	sp, #28
 800043e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000440:	40021800 	.word	0x40021800
 8000444:	50000400 	.word	0x50000400
 8000448:	50000800 	.word	0x50000800
 800044c:	50000c00 	.word	0x50000c00
 8000450:	50001400 	.word	0x50001400

08000454 <GPIO_PeriClkCtrl>:
 * @brief  Enables or disables the clock for the specified GPIO peripheral.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  en: Enable/disable flag (1 to enable, 0 to disable).
 * @retval None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t en){
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	000a      	movs	r2, r1
 800045e:	1cfb      	adds	r3, r7, #3
 8000460:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 8000462:	1cfb      	adds	r3, r7, #3
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b01      	cmp	r3, #1
 8000468:	d137      	bne.n	80004da <GPIO_PeriClkCtrl+0x86>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_EN();
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	23a0      	movs	r3, #160	@ 0xa0
 800046e:	05db      	lsls	r3, r3, #23
 8000470:	429a      	cmp	r2, r3
 8000472:	d106      	bne.n	8000482 <GPIO_PeriClkCtrl+0x2e>
 8000474:	4b36      	ldr	r3, [pc, #216]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000476:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000478:	4b35      	ldr	r3, [pc, #212]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 800047a:	2101      	movs	r1, #1
 800047c:	430a      	orrs	r2, r1
 800047e:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
	}
}
 8000480:	e062      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a33      	ldr	r2, [pc, #204]	@ (8000554 <GPIO_PeriClkCtrl+0x100>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <GPIO_PeriClkCtrl+0x44>
 800048a:	4b31      	ldr	r3, [pc, #196]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 800048c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048e:	4b30      	ldr	r3, [pc, #192]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000490:	2102      	movs	r1, #2
 8000492:	430a      	orrs	r2, r1
 8000494:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000496:	e057      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a2f      	ldr	r2, [pc, #188]	@ (8000558 <GPIO_PeriClkCtrl+0x104>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <GPIO_PeriClkCtrl+0x5a>
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004a6:	2104      	movs	r1, #4
 80004a8:	430a      	orrs	r2, r1
 80004aa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004ac:	e04c      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a2a      	ldr	r2, [pc, #168]	@ (800055c <GPIO_PeriClkCtrl+0x108>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <GPIO_PeriClkCtrl+0x70>
 80004b6:	4b26      	ldr	r3, [pc, #152]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ba:	4b25      	ldr	r3, [pc, #148]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004bc:	2108      	movs	r1, #8
 80004be:	430a      	orrs	r2, r1
 80004c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004c2:	e041      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a26      	ldr	r2, [pc, #152]	@ (8000560 <GPIO_PeriClkCtrl+0x10c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d13d      	bne.n	8000548 <GPIO_PeriClkCtrl+0xf4>
 80004cc:	4b20      	ldr	r3, [pc, #128]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004d2:	2120      	movs	r1, #32
 80004d4:	430a      	orrs	r2, r1
 80004d6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004d8:	e036      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_DI();
 80004da:	687a      	ldr	r2, [r7, #4]
 80004dc:	23a0      	movs	r3, #160	@ 0xa0
 80004de:	05db      	lsls	r3, r3, #23
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClkCtrl+0x9e>
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004e8:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004ea:	2101      	movs	r1, #1
 80004ec:	438a      	bics	r2, r1
 80004ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004f0:	e02a      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a17      	ldr	r2, [pc, #92]	@ (8000554 <GPIO_PeriClkCtrl+0x100>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClkCtrl+0xb4>
 80004fa:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000500:	2102      	movs	r1, #2
 8000502:	438a      	bics	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000506:	e01f      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <GPIO_PeriClkCtrl+0x104>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d106      	bne.n	800051e <GPIO_PeriClkCtrl+0xca>
 8000510:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000514:	4b0e      	ldr	r3, [pc, #56]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000516:	2104      	movs	r1, #4
 8000518:	438a      	bics	r2, r1
 800051a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800051c:	e014      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <GPIO_PeriClkCtrl+0x108>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d106      	bne.n	8000534 <GPIO_PeriClkCtrl+0xe0>
 8000526:	4b0a      	ldr	r3, [pc, #40]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800052a:	4b09      	ldr	r3, [pc, #36]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 800052c:	2108      	movs	r1, #8
 800052e:	438a      	bics	r2, r1
 8000530:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000532:	e009      	b.n	8000548 <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4a0a      	ldr	r2, [pc, #40]	@ (8000560 <GPIO_PeriClkCtrl+0x10c>)
 8000538:	4293      	cmp	r3, r2
 800053a:	d105      	bne.n	8000548 <GPIO_PeriClkCtrl+0xf4>
 800053c:	4b04      	ldr	r3, [pc, #16]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 800053e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000540:	4b03      	ldr	r3, [pc, #12]	@ (8000550 <GPIO_PeriClkCtrl+0xfc>)
 8000542:	2120      	movs	r1, #32
 8000544:	438a      	bics	r2, r1
 8000546:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000548:	46c0      	nop			@ (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40021000 	.word	0x40021000
 8000554:	50000400 	.word	0x50000400
 8000558:	50000800 	.word	0x50000800
 800055c:	50000c00 	.word	0x50000c00
 8000560:	50001400 	.word	0x50001400

08000564 <GPIO_ReadFromInputPin>:
 * @brief  Reads the logic level from a specific GPIO pin.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  pinNum: Pin number to read (0–15).
 * @retval Logic level of the pin (0 or 1).
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNum){
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	000a      	movs	r2, r1
 800056e:	1cfb      	adds	r3, r7, #3
 8000570:	701a      	strb	r2, [r3, #0]
	uint8_t value = (uint8_t)((pGPIOx->IDR >> pinNum) & 0x01 );
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	691a      	ldr	r2, [r3, #16]
 8000576:	1cfb      	adds	r3, r7, #3
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	40da      	lsrs	r2, r3
 800057c:	0013      	movs	r3, r2
 800057e:	b2da      	uxtb	r2, r3
 8000580:	200f      	movs	r0, #15
 8000582:	183b      	adds	r3, r7, r0
 8000584:	2101      	movs	r1, #1
 8000586:	400a      	ands	r2, r1
 8000588:	701a      	strb	r2, [r3, #0]
	return value;
 800058a:	183b      	adds	r3, r7, r0
 800058c:	781b      	ldrb	r3, [r3, #0]
}
 800058e:	0018      	movs	r0, r3
 8000590:	46bd      	mov	sp, r7
 8000592:	b004      	add	sp, #16
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <SPI_Init>:
/**
 * @brief  Initializes the SPI with the specified configuration.
 * @param  pSPIHandle: Pointer to the SPI handle structure containing the configuration.
 * @retval None
 */
void SPI_Init(SPI_Handle_t *pSPIHandle){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	// congifure the SPI_CR1 register
	uint32_t tempreg = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	60fb      	str	r3, [r7, #12]

	//enable the peripheral clock
	SPI_PeriClkCtrl(pSPIHandle->pSPIx, ENABLE);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2101      	movs	r1, #1
 80005aa:	0018      	movs	r0, r3
 80005ac:	f000 f854 	bl	8000658 <SPI_PeriClkCtrl>

	// 1. configure the device mode
	tempreg |= pSPIHandle->SPI_Config.SPI_Mode << 2;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	009b      	lsls	r3, r3, #2
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	4313      	orrs	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]

	// 2. Configure the bus config
	if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD) {
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	689b      	ldr	r3, [r3, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <SPI_Init+0x36>
		// Full-Duplex mode (default), BIDIMODE = 0
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <SPI_Init+0xbc>)
 80005c8:	4013      	ands	r3, r2
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	e016      	b.n	80005fc <SPI_Init+0x64>
	} else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD) {
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	689b      	ldr	r3, [r3, #8]
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	d105      	bne.n	80005e2 <SPI_Init+0x4a>
		// Half-Duplex mode, BIDIMODE = 1
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	2280      	movs	r2, #128	@ 0x80
 80005da:	0212      	lsls	r2, r2, #8
 80005dc:	4313      	orrs	r3, r2
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	e00c      	b.n	80005fc <SPI_Init+0x64>
	} else if (pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d108      	bne.n	80005fc <SPI_Init+0x64>
		// Simplex mode (Receive only), BIDIMODE = 0, RXONLY = 1
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	4a19      	ldr	r2, [pc, #100]	@ (8000654 <SPI_Init+0xbc>)
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << SPI_CR1_RXONLY);
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	2280      	movs	r2, #128	@ 0x80
 80005f6:	00d2      	lsls	r2, r2, #3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI clock speed (Baud Rate)
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR_Pos;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	68db      	ldr	r3, [r3, #12]
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	4313      	orrs	r3, r2
 8000606:	60fb      	str	r3, [r7, #12]

	// 4. Configure the SPI Clock Phase (CPHA)
	tempreg |= pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4313      	orrs	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]

	// 5. Configure the SPI Clock Polarity (CPOL)
	tempreg |= pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	005b      	lsls	r3, r3, #1
 8000618:	68fa      	ldr	r2, [r7, #12]
 800061a:	4313      	orrs	r3, r2
 800061c:	60fb      	str	r3, [r7, #12]

	// 6. Configure the SPI Software Slave Management (SSM)
	tempreg |= pSPIHandle->SPI_Config.SPI_SSM << SPI_CR1_SSM;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	025b      	lsls	r3, r3, #9
 8000624:	68fa      	ldr	r2, [r7, #12]
 8000626:	4313      	orrs	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]

	// Write to SPI_CR1 register
	pSPIHandle->pSPIx->CR1 = tempreg;
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	601a      	str	r2, [r3, #0]

	// configure the SPI_CR2 register
	tempreg = 0;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]

	// 1. Configure the Data Frame Size (DS[3:0] in CR2)
	tempreg |= (pSPIHandle->SPI_Config.SPI_DSF << SPI_CR2_DS_Pos);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	691b      	ldr	r3, [r3, #16]
 800063a:	021b      	lsls	r3, r3, #8
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4313      	orrs	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]

	// Write to SPI_CR2 register
	pSPIHandle->pSPIx->CR2 = tempreg;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	605a      	str	r2, [r3, #4]
}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	46bd      	mov	sp, r7
 800064e:	b004      	add	sp, #16
 8000650:	bd80      	pop	{r7, pc}
 8000652:	46c0      	nop			@ (mov r8, r8)
 8000654:	ffff7fff 	.word	0xffff7fff

08000658 <SPI_PeriClkCtrl>:
 * @brief  Enables or disables the clock for the specified SPI peripheral.
 * @param  pSPIx: Base address of the SPI peripheral.
 * @param  en: Enable/disable flag (1 to enable, 0 to disable).
 * @retval None
 */
void SPI_PeriClkCtrl(SPI_RegDef_t *pSPIx, uint8_t en){
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	000a      	movs	r2, r1
 8000662:	1cfb      	adds	r3, r7, #3
 8000664:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 8000666:	1cfb      	adds	r3, r7, #3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b01      	cmp	r3, #1
 800066c:	d117      	bne.n	800069e <SPI_PeriClkCtrl+0x46>
		if(pSPIx == SPI1)	SPI1_PCLK_EN();
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a17      	ldr	r2, [pc, #92]	@ (80006d0 <SPI_PeriClkCtrl+0x78>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d107      	bne.n	8000686 <SPI_PeriClkCtrl+0x2e>
 8000676:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 8000678:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	0149      	lsls	r1, r1, #5
 8000680:	430a      	orrs	r2, r1
 8000682:	641a      	str	r2, [r3, #64]	@ 0x40
		else if(pSPIx == SPI2) SPI2_PCLK_EN();
	}else{
		if(pSPIx == SPI1)	SPI1_PCLK_DI();
		else if(pSPIx == SPI2) SPI2_PCLK_DI();
	}
}
 8000684:	e020      	b.n	80006c8 <SPI_PeriClkCtrl+0x70>
		else if(pSPIx == SPI2) SPI2_PCLK_EN();
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <SPI_PeriClkCtrl+0x80>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d11c      	bne.n	80006c8 <SPI_PeriClkCtrl+0x70>
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 8000690:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000692:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 8000694:	2180      	movs	r1, #128	@ 0x80
 8000696:	01c9      	lsls	r1, r1, #7
 8000698:	430a      	orrs	r2, r1
 800069a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800069c:	e014      	b.n	80006c8 <SPI_PeriClkCtrl+0x70>
		if(pSPIx == SPI1)	SPI1_PCLK_DI();
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	4a0b      	ldr	r2, [pc, #44]	@ (80006d0 <SPI_PeriClkCtrl+0x78>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d106      	bne.n	80006b4 <SPI_PeriClkCtrl+0x5c>
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 80006a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006aa:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 80006ac:	490b      	ldr	r1, [pc, #44]	@ (80006dc <SPI_PeriClkCtrl+0x84>)
 80006ae:	400a      	ands	r2, r1
 80006b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80006b2:	e009      	b.n	80006c8 <SPI_PeriClkCtrl+0x70>
		else if(pSPIx == SPI2) SPI2_PCLK_DI();
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	4a08      	ldr	r2, [pc, #32]	@ (80006d8 <SPI_PeriClkCtrl+0x80>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d105      	bne.n	80006c8 <SPI_PeriClkCtrl+0x70>
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 80006be:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <SPI_PeriClkCtrl+0x7c>)
 80006c2:	4907      	ldr	r1, [pc, #28]	@ (80006e0 <SPI_PeriClkCtrl+0x88>)
 80006c4:	400a      	ands	r2, r1
 80006c6:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80006c8:	46c0      	nop			@ (mov r8, r8)
 80006ca:	46bd      	mov	sp, r7
 80006cc:	b002      	add	sp, #8
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40013000 	.word	0x40013000
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40003800 	.word	0x40003800
 80006dc:	ffffefff 	.word	0xffffefff
 80006e0:	ffffbfff 	.word	0xffffbfff

080006e4 <SPI_PeripheralCtrl>:

void SPI_PeripheralCtrl(SPI_RegDef_t *pSPIx, uint8_t en){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	000a      	movs	r2, r1
 80006ee:	1cfb      	adds	r3, r7, #3
 80006f0:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 80006f2:	1cfb      	adds	r3, r7, #3
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b01      	cmp	r3, #1
 80006f8:	d106      	bne.n	8000708 <SPI_PeripheralCtrl+0x24>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2240      	movs	r2, #64	@ 0x40
 8000700:	431a      	orrs	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	601a      	str	r2, [r3, #0]
	} else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000706:	e006      	b.n	8000716 <SPI_PeripheralCtrl+0x32>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2240      	movs	r2, #64	@ 0x40
 800070e:	4393      	bics	r3, r2
 8000710:	001a      	movs	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	46c0      	nop			@ (mov r8, r8)
 8000718:	46bd      	mov	sp, r7
 800071a:	b002      	add	sp, #8
 800071c:	bd80      	pop	{r7, pc}

0800071e <SPI_SSOEConfig>:
		} else {
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
		}
}

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t en){
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
 8000724:	6078      	str	r0, [r7, #4]
 8000726:	000a      	movs	r2, r1
 8000728:	1cfb      	adds	r3, r7, #3
 800072a:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 800072c:	1cfb      	adds	r3, r7, #3
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d106      	bne.n	8000742 <SPI_SSOEConfig+0x24>
			pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2204      	movs	r2, #4
 800073a:	431a      	orrs	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	605a      	str	r2, [r3, #4]
		} else {
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
		}
}
 8000740:	e006      	b.n	8000750 <SPI_SSOEConfig+0x32>
			pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2204      	movs	r2, #4
 8000748:	4393      	bics	r3, r2
 800074a:	001a      	movs	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	605a      	str	r2, [r3, #4]
}
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b002      	add	sp, #8
 8000756:	bd80      	pop	{r7, pc}

08000758 <SPI_GetFlagStatus>:

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName){
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
 8000760:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName){
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	689b      	ldr	r3, [r3, #8]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	4013      	ands	r3, r2
 800076a:	d001      	beq.n	8000770 <SPI_GetFlagStatus+0x18>
		return FLAG_SET;
 800076c:	2301      	movs	r3, #1
 800076e:	e000      	b.n	8000772 <SPI_GetFlagStatus+0x1a>
	} else {
		return FLAG_RESET;
 8000770:	2300      	movs	r3, #0
	}
}
 8000772:	0018      	movs	r0, r3
 8000774:	46bd      	mov	sp, r7
 8000776:	b002      	add	sp, #8
 8000778:	bd80      	pop	{r7, pc}

0800077a <SPI_SendData>:
 * @param  Len: Size of the data to be transmitted
 * @retval None
 *
 * @note  This is blocking call
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len){
 800077a:	b580      	push	{r7, lr}
 800077c:	b084      	sub	sp, #16
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
	while (Len > 0){
 8000786:	e02c      	b.n	80007e2 <SPI_SendData+0x68>
		// 1. Wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2102      	movs	r1, #2
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ffe2 	bl	8000758 <SPI_GetFlagStatus>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d0f8      	beq.n	800078a <SPI_SendData+0x10>

		// 2. check the DFS bit in CR2
		if (((pSPIx->CR2 & (0xF << SPI_CR2_DS_Pos)) >> SPI_CR2_DS_Pos) == SPI_DSF_16Bits){
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	685b      	ldr	r3, [r3, #4]
 800079c:	0a1b      	lsrs	r3, r3, #8
 800079e:	220f      	movs	r2, #15
 80007a0:	4013      	ands	r3, r2
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d10b      	bne.n	80007be <SPI_SendData+0x44>
			// 16 bit DFS
			// 1. Load 16 bits of data into the DR register
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	881b      	ldrh	r3, [r3, #0]
 80007aa:	001a      	movs	r2, r3
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	60da      	str	r2, [r3, #12]
			Len -= 2; // Reduce length by 2 bytes
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b02      	subs	r3, #2
 80007b4:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++; // increment the buffer by 2 bytes(done by uibt16_t typecast)
 80007b6:	68bb      	ldr	r3, [r7, #8]
 80007b8:	3301      	adds	r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	e011      	b.n	80007e2 <SPI_SendData+0x68>
		} else if ((((pSPIx->CR2 & (0xF << SPI_CR2_DS_Pos)) >> SPI_CR2_DS_Pos) == SPI_DSF_8BITS)) {
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	0a1b      	lsrs	r3, r3, #8
 80007c4:	220f      	movs	r2, #15
 80007c6:	4013      	ands	r3, r2
 80007c8:	2b07      	cmp	r3, #7
 80007ca:	d10a      	bne.n	80007e2 <SPI_SendData+0x68>
			// 8 bit DFS
			// 1. Load 8 bits of data into the DR register
			pSPIx->DR = *pTxBuffer;
 80007cc:	68bb      	ldr	r3, [r7, #8]
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	001a      	movs	r2, r3
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	60da      	str	r2, [r3, #12]
			Len--;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	3b01      	subs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	3301      	adds	r3, #1
 80007e0:	60bb      	str	r3, [r7, #8]
	while (Len > 0){
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d1cf      	bne.n	8000788 <SPI_SendData+0xe>
		}

	}
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46c0      	nop			@ (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	b004      	add	sp, #16
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <SPI1_GPIOInits>:
 * PA4 -> SPI1_NSS   (Chip select)
 * PA1 -> SPI1_SCK
 * PA6 ->  SPI1_MISO
 * ALT function mode 0
 */
void SPI1_GPIOInits(void){
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b084      	sub	sp, #16
 80007f6:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOA;
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	22a0      	movs	r2, #160	@ 0xa0
 80007fc:	05d2      	lsls	r2, r2, #23
 80007fe:	601a      	str	r2, [r3, #0]
	SPIPins.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_AF;
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	2202      	movs	r2, #2
 8000804:	715a      	strb	r2, [r3, #5]
	SPIPins.GPIO_PinConfig.GPIO_AltFunction = GPIO_AF_0;
 8000806:	1d3b      	adds	r3, r7, #4
 8000808:	2200      	movs	r2, #0
 800080a:	725a      	strb	r2, [r3, #9]
	SPIPins.GPIO_PinConfig.GPIO_OpType = GPIO_OP_TYPE_PP;
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	721a      	strb	r2, [r3, #8]
	SPIPins.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	71da      	strb	r2, [r3, #7]
	SPIPins.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_VHIGH;
 8000818:	1d3b      	adds	r3, r7, #4
 800081a:	2203      	movs	r2, #3
 800081c:	719a      	strb	r2, [r3, #6]

	// Sclk
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000824:	1d3b      	adds	r3, r7, #4
 8000826:	0018      	movs	r0, r3
 8000828:	f7ff fc74 	bl	8000114 <GPIO_Init>

	// MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2202      	movs	r2, #2
 8000830:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	0018      	movs	r0, r3
 8000836:	f7ff fc6d 	bl	8000114 <GPIO_Init>

	// MISO
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2206      	movs	r2, #6
 800083e:	711a      	strb	r2, [r3, #4]
	GPIO_Init(&SPIPins);
 8000840:	1d3b      	adds	r3, r7, #4
 8000842:	0018      	movs	r0, r3
 8000844:	f7ff fc66 	bl	8000114 <GPIO_Init>

	// NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_4;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2204      	movs	r2, #4
 800084c:	711a      	strb	r2, [r3, #4]
	GPIO_Init(& SPIPins);
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	0018      	movs	r0, r3
 8000852:	f7ff fc5f 	bl	8000114 <GPIO_Init>
}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b004      	add	sp, #16
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <SPI1_Inits>:

void SPI1_Inits(void){
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI1;
 8000866:	003b      	movs	r3, r7
 8000868:	4a0f      	ldr	r2, [pc, #60]	@ (80008a8 <SPI1_Inits+0x48>)
 800086a:	601a      	str	r2, [r3, #0]
	SPI2handle.SPI_Config.SPI_Mode = SPI_MODE_MASTER;
 800086c:	003b      	movs	r3, r7
 800086e:	2201      	movs	r2, #1
 8000870:	605a      	str	r2, [r3, #4]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000872:	003b      	movs	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	609a      	str	r2, [r3, #8]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV8;
 8000878:	003b      	movs	r3, r7
 800087a:	2202      	movs	r2, #2
 800087c:	60da      	str	r2, [r3, #12]
	SPI2handle.SPI_Config.SPI_DSF = SPI_DSF_8BITS;
 800087e:	003b      	movs	r3, r7
 8000880:	2207      	movs	r2, #7
 8000882:	611a      	str	r2, [r3, #16]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000884:	003b      	movs	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 800088a:	003b      	movs	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI;
 8000890:	003b      	movs	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]

	SPI_Init(&SPI2handle);
 8000896:	003b      	movs	r3, r7
 8000898:	0018      	movs	r0, r3
 800089a:	f7ff fe7d 	bl	8000598 <SPI_Init>
}
 800089e:	46c0      	nop			@ (mov r8, r8)
 80008a0:	46bd      	mov	sp, r7
 80008a2:	b008      	add	sp, #32
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	40013000 	.word	0x40013000

080008ac <GPIO_buttonInit>:

void GPIO_buttonInit(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioButton;

	GpioButton.pGPIOx = GPIOA;
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	22a0      	movs	r2, #160	@ 0xa0
 80008b6:	05d2      	lsls	r2, r2, #23
 80008b8:	601a      	str	r2, [r3, #0]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	220c      	movs	r2, #12
 80008be:	711a      	strb	r2, [r3, #4]
	GpioButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INPUT;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
	GpioButton.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2201      	movs	r2, #1
 80008ca:	719a      	strb	r2, [r3, #6]
	GpioButton.GPIO_PinConfig.GPIO_OpType = GPIO_OP_TYPE_PP;
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2200      	movs	r2, #0
 80008d0:	721a      	strb	r2, [r3, #8]
	GpioButton.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 80008d2:	1d3b      	adds	r3, r7, #4
 80008d4:	2200      	movs	r2, #0
 80008d6:	71da      	strb	r2, [r3, #7]

	GPIO_Init(&GpioButton);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	0018      	movs	r0, r3
 80008dc:	f7ff fc1a 	bl	8000114 <GPIO_Init>
}
 80008e0:	46c0      	nop			@ (mov r8, r8)
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <delay>:

void delay(void){
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	e002      	b.n	80008fa <delay+0x12>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	3301      	adds	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a03      	ldr	r2, [pc, #12]	@ (800090c <delay+0x24>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d9f8      	bls.n	80008f4 <delay+0xc>
}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	46c0      	nop			@ (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	0007a11f 	.word	0x0007a11f

08000910 <main>:


int main()
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <main+0x90>)
 800091a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800091c:	c313      	stmia	r3!, {r0, r1, r4}

	GPIO_buttonInit();
 800091e:	f7ff ffc5 	bl	80008ac <GPIO_buttonInit>

	// initialize the GPIO pins to behave as SPI1 pins
	SPI1_GPIOInits();
 8000922:	f7ff ff66 	bl	80007f2 <SPI1_GPIOInits>

	// initialize the SPI1 peripheral params
	SPI1_Inits();
 8000926:	f7ff ff9b 	bl	8000860 <SPI1_Inits>
	 * Making the SSOE 1 does NSS output enable
	 * the NSS pin is automatically managed by the hardware
	 * i.e when SPE = 1, NSS will be pulled to low
	 * and NSS pin will be high when SPE = 0
	 */
	SPI_SSOEConfig(SPI1, ENABLE);
 800092a:	4b1e      	ldr	r3, [pc, #120]	@ (80009a4 <main+0x94>)
 800092c:	2101      	movs	r1, #1
 800092e:	0018      	movs	r0, r3
 8000930:	f7ff fef5 	bl	800071e <SPI_SSOEConfig>


	while (1) {
		while (!GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_12));
 8000934:	46c0      	nop			@ (mov r8, r8)
 8000936:	23a0      	movs	r3, #160	@ 0xa0
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	210c      	movs	r1, #12
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fe11 	bl	8000564 <GPIO_ReadFromInputPin>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d0f7      	beq.n	8000936 <main+0x26>
		delay();
 8000946:	f7ff ffcf 	bl	80008e8 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralCtrl(SPI1, ENABLE);
 800094a:	4b16      	ldr	r3, [pc, #88]	@ (80009a4 <main+0x94>)
 800094c:	2101      	movs	r1, #1
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff fec8 	bl	80006e4 <SPI_PeripheralCtrl>

		// sending the data length information for slave
		uint8_t datalen = strlen(user_data);
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fbd4 	bl	8000104 <strlen>
 800095c:	0003      	movs	r3, r0
 800095e:	b2da      	uxtb	r2, r3
 8000960:	1cfb      	adds	r3, r7, #3
 8000962:	701a      	strb	r2, [r3, #0]
		SPI_SendData(SPI1, &datalen, 1);
 8000964:	1cfb      	adds	r3, r7, #3
 8000966:	480f      	ldr	r0, [pc, #60]	@ (80009a4 <main+0x94>)
 8000968:	2201      	movs	r2, #1
 800096a:	0019      	movs	r1, r3
 800096c:	f7ff ff05 	bl	800077a <SPI_SendData>

		SPI_SendData(SPI1, (uint8_t*) user_data, strlen(user_data));
 8000970:	1d3b      	adds	r3, r7, #4
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff fbc6 	bl	8000104 <strlen>
 8000978:	0002      	movs	r2, r0
 800097a:	1d3b      	adds	r3, r7, #4
 800097c:	4809      	ldr	r0, [pc, #36]	@ (80009a4 <main+0x94>)
 800097e:	0019      	movs	r1, r3
 8000980:	f7ff fefb 	bl	800077a <SPI_SendData>

		// wait until the SPI is busy
		while( SPI_GetFlagStatus(SPI1, SPI_BSY_FLAG));
 8000984:	46c0      	nop			@ (mov r8, r8)
 8000986:	4b07      	ldr	r3, [pc, #28]	@ (80009a4 <main+0x94>)
 8000988:	2180      	movs	r1, #128	@ 0x80
 800098a:	0018      	movs	r0, r3
 800098c:	f7ff fee4 	bl	8000758 <SPI_GetFlagStatus>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d1f8      	bne.n	8000986 <main+0x76>
		//Disable the SPI1 peripheral
		SPI_PeripheralCtrl(SPI1, DISABLE);
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <main+0x94>)
 8000996:	2100      	movs	r1, #0
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fea3 	bl	80006e4 <SPI_PeripheralCtrl>
	while (1) {
 800099e:	e7c9      	b.n	8000934 <main+0x24>
 80009a0:	08000a5c 	.word	0x08000a5c
 80009a4:	40013000 	.word	0x40013000

080009a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a8:	480d      	ldr	r0, [pc, #52]	@ (80009e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009ac:	e000      	b.n	80009b0 <Reset_Handler+0x8>
 80009ae:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009b0:	480c      	ldr	r0, [pc, #48]	@ (80009e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009b2:	490d      	ldr	r1, [pc, #52]	@ (80009e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <LoopForever+0xe>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0a      	ldr	r2, [pc, #40]	@ (80009f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c8:	4c0a      	ldr	r4, [pc, #40]	@ (80009f4 <LoopForever+0x16>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009d6:	f000 f811 	bl	80009fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009da:	f7ff ff99 	bl	8000910 <main>

080009de <LoopForever>:

LoopForever:
  b LoopForever
 80009de:	e7fe      	b.n	80009de <LoopForever>
  ldr   r0, =_estack
 80009e0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80009ec:	08000a70 	.word	0x08000a70
  ldr r2, =_sbss
 80009f0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80009f4:	2000001c 	.word	0x2000001c

080009f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f8:	e7fe      	b.n	80009f8 <ADC_IRQHandler>
	...

080009fc <__libc_init_array>:
 80009fc:	b570      	push	{r4, r5, r6, lr}
 80009fe:	2600      	movs	r6, #0
 8000a00:	4c0c      	ldr	r4, [pc, #48]	@ (8000a34 <__libc_init_array+0x38>)
 8000a02:	4d0d      	ldr	r5, [pc, #52]	@ (8000a38 <__libc_init_array+0x3c>)
 8000a04:	1b64      	subs	r4, r4, r5
 8000a06:	10a4      	asrs	r4, r4, #2
 8000a08:	42a6      	cmp	r6, r4
 8000a0a:	d109      	bne.n	8000a20 <__libc_init_array+0x24>
 8000a0c:	2600      	movs	r6, #0
 8000a0e:	f000 f819 	bl	8000a44 <_init>
 8000a12:	4c0a      	ldr	r4, [pc, #40]	@ (8000a3c <__libc_init_array+0x40>)
 8000a14:	4d0a      	ldr	r5, [pc, #40]	@ (8000a40 <__libc_init_array+0x44>)
 8000a16:	1b64      	subs	r4, r4, r5
 8000a18:	10a4      	asrs	r4, r4, #2
 8000a1a:	42a6      	cmp	r6, r4
 8000a1c:	d105      	bne.n	8000a2a <__libc_init_array+0x2e>
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	00b3      	lsls	r3, r6, #2
 8000a22:	58eb      	ldr	r3, [r5, r3]
 8000a24:	4798      	blx	r3
 8000a26:	3601      	adds	r6, #1
 8000a28:	e7ee      	b.n	8000a08 <__libc_init_array+0xc>
 8000a2a:	00b3      	lsls	r3, r6, #2
 8000a2c:	58eb      	ldr	r3, [r5, r3]
 8000a2e:	4798      	blx	r3
 8000a30:	3601      	adds	r6, #1
 8000a32:	e7f2      	b.n	8000a1a <__libc_init_array+0x1e>
 8000a34:	08000a68 	.word	0x08000a68
 8000a38:	08000a68 	.word	0x08000a68
 8000a3c:	08000a6c 	.word	0x08000a6c
 8000a40:	08000a68 	.word	0x08000a68

08000a44 <_init>:
 8000a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4a:	bc08      	pop	{r3}
 8000a4c:	469e      	mov	lr, r3
 8000a4e:	4770      	bx	lr

08000a50 <_fini>:
 8000a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a56:	bc08      	pop	{r3}
 8000a58:	469e      	mov	lr, r3
 8000a5a:	4770      	bx	lr
