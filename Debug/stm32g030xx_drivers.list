
stm32g030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000016c  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000228  08000230  00001230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000228  08000228  00001230  2**0
                  CONTENTS
  4 .ARM          00000000  08000228  08000228  00001230  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000228  08000230  00001230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000228  08000228  00001228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800022c  0800022c  0000122c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001230  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000230  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000230  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY
 12 .debug_info   000007c5  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c1  00000000  00000000  00001a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00001be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  00001ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000a9c  00000000  00000000  00001d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000004ee  00000000  00000000  000027c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  00002caf  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000001e8  00000000  00000000  00002cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  00002edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000210 	.word	0x08000210

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000210 	.word	0x08000210

08000104 <GPIO_IRQHandling>:
/**
 * @brief  Handle the GPIO interrupt
 * @param  pinNum: GPIO pin number that triggered the interrupt
 * @retval None
 */
void GPIO_IRQHandling(uint8_t pinNum){
 8000104:	b580      	push	{r7, lr}
 8000106:	b082      	sub	sp, #8
 8000108:	af00      	add	r7, sp, #0
 800010a:	0002      	movs	r2, r0
 800010c:	1dfb      	adds	r3, r7, #7
 800010e:	701a      	strb	r2, [r3, #0]
	// Check if the interrupt was triggered on the falling edge
    if(EXTI->FPR1 & (1 << pinNum)) {
 8000110:	4b10      	ldr	r3, [pc, #64]	@ (8000154 <GPIO_IRQHandling+0x50>)
 8000112:	691b      	ldr	r3, [r3, #16]
 8000114:	1dfa      	adds	r2, r7, #7
 8000116:	7812      	ldrb	r2, [r2, #0]
 8000118:	2101      	movs	r1, #1
 800011a:	4091      	lsls	r1, r2
 800011c:	000a      	movs	r2, r1
 800011e:	4013      	ands	r3, r2
 8000120:	d005      	beq.n	800012e <GPIO_IRQHandling+0x2a>
    	EXTI->FPR1 = (1 << pinNum);  // Clear the falling edge pending flag for the specific pin
 8000122:	1dfb      	adds	r3, r7, #7
 8000124:	781b      	ldrb	r3, [r3, #0]
 8000126:	2201      	movs	r2, #1
 8000128:	409a      	lsls	r2, r3
 800012a:	4b0a      	ldr	r3, [pc, #40]	@ (8000154 <GPIO_IRQHandling+0x50>)
 800012c:	611a      	str	r2, [r3, #16]
    }

    // Check if the interrupt was triggered on the rising edge
    if(EXTI->RPR1 & (1 << pinNum)) {
 800012e:	4b09      	ldr	r3, [pc, #36]	@ (8000154 <GPIO_IRQHandling+0x50>)
 8000130:	68db      	ldr	r3, [r3, #12]
 8000132:	1dfa      	adds	r2, r7, #7
 8000134:	7812      	ldrb	r2, [r2, #0]
 8000136:	2101      	movs	r1, #1
 8000138:	4091      	lsls	r1, r2
 800013a:	000a      	movs	r2, r1
 800013c:	4013      	ands	r3, r2
 800013e:	d005      	beq.n	800014c <GPIO_IRQHandling+0x48>
    	EXTI->RPR1 = (1 << pinNum);  // Clear the rising edge pending flag for the specific pin
 8000140:	1dfb      	adds	r3, r7, #7
 8000142:	781b      	ldrb	r3, [r3, #0]
 8000144:	2201      	movs	r2, #1
 8000146:	409a      	lsls	r2, r3
 8000148:	4b02      	ldr	r3, [pc, #8]	@ (8000154 <GPIO_IRQHandling+0x50>)
 800014a:	60da      	str	r2, [r3, #12]
    }
}
 800014c:	46c0      	nop			@ (mov r8, r8)
 800014e:	46bd      	mov	sp, r7
 8000150:	b002      	add	sp, #8
 8000152:	bd80      	pop	{r7, pc}
 8000154:	40021800 	.word	0x40021800

08000158 <main>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void){
 8000158:	b580      	push	{r7, lr}
 800015a:	af00      	add	r7, sp, #0
 800015c:	2300      	movs	r3, #0

}
 800015e:	0018      	movs	r0, r3
 8000160:	46bd      	mov	sp, r7
 8000162:	bd80      	pop	{r7, pc}

08000164 <EXTI0_1_IRQHandler>:

void EXTI0_1_IRQHandler(void){
 8000164:	b580      	push	{r7, lr}
 8000166:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_0);
 8000168:	2000      	movs	r0, #0
 800016a:	f7ff ffcb 	bl	8000104 <GPIO_IRQHandling>
}
 800016e:	46c0      	nop			@ (mov r8, r8)
 8000170:	46bd      	mov	sp, r7
 8000172:	bd80      	pop	{r7, pc}

08000174 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000174:	480d      	ldr	r0, [pc, #52]	@ (80001ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000176:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000178:	e000      	b.n	800017c <Reset_Handler+0x8>
 800017a:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800017c:	480c      	ldr	r0, [pc, #48]	@ (80001b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800017e:	490d      	ldr	r1, [pc, #52]	@ (80001b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000180:	4a0d      	ldr	r2, [pc, #52]	@ (80001b8 <LoopForever+0xe>)
  movs r3, #0
 8000182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000184:	e002      	b.n	800018c <LoopCopyDataInit>

08000186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800018a:	3304      	adds	r3, #4

0800018c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800018c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800018e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000190:	d3f9      	bcc.n	8000186 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000192:	4a0a      	ldr	r2, [pc, #40]	@ (80001bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000194:	4c0a      	ldr	r4, [pc, #40]	@ (80001c0 <LoopForever+0x16>)
  movs r3, #0
 8000196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000198:	e001      	b.n	800019e <LoopFillZerobss>

0800019a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800019a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800019c:	3204      	adds	r2, #4

0800019e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800019e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001a0:	d3fb      	bcc.n	800019a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80001a2:	f000 f811 	bl	80001c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001a6:	f7ff ffd7 	bl	8000158 <main>

080001aa <LoopForever>:

LoopForever:
  b LoopForever
 80001aa:	e7fe      	b.n	80001aa <LoopForever>
  ldr   r0, =_estack
 80001ac:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80001b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001b4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001b8:	08000230 	.word	0x08000230
  ldr r2, =_sbss
 80001bc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80001c0:	2000001c 	.word	0x2000001c

080001c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80001c4:	e7fe      	b.n	80001c4 <ADC_IRQHandler>
	...

080001c8 <__libc_init_array>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	2600      	movs	r6, #0
 80001cc:	4c0c      	ldr	r4, [pc, #48]	@ (8000200 <__libc_init_array+0x38>)
 80001ce:	4d0d      	ldr	r5, [pc, #52]	@ (8000204 <__libc_init_array+0x3c>)
 80001d0:	1b64      	subs	r4, r4, r5
 80001d2:	10a4      	asrs	r4, r4, #2
 80001d4:	42a6      	cmp	r6, r4
 80001d6:	d109      	bne.n	80001ec <__libc_init_array+0x24>
 80001d8:	2600      	movs	r6, #0
 80001da:	f000 f819 	bl	8000210 <_init>
 80001de:	4c0a      	ldr	r4, [pc, #40]	@ (8000208 <__libc_init_array+0x40>)
 80001e0:	4d0a      	ldr	r5, [pc, #40]	@ (800020c <__libc_init_array+0x44>)
 80001e2:	1b64      	subs	r4, r4, r5
 80001e4:	10a4      	asrs	r4, r4, #2
 80001e6:	42a6      	cmp	r6, r4
 80001e8:	d105      	bne.n	80001f6 <__libc_init_array+0x2e>
 80001ea:	bd70      	pop	{r4, r5, r6, pc}
 80001ec:	00b3      	lsls	r3, r6, #2
 80001ee:	58eb      	ldr	r3, [r5, r3]
 80001f0:	4798      	blx	r3
 80001f2:	3601      	adds	r6, #1
 80001f4:	e7ee      	b.n	80001d4 <__libc_init_array+0xc>
 80001f6:	00b3      	lsls	r3, r6, #2
 80001f8:	58eb      	ldr	r3, [r5, r3]
 80001fa:	4798      	blx	r3
 80001fc:	3601      	adds	r6, #1
 80001fe:	e7f2      	b.n	80001e6 <__libc_init_array+0x1e>
 8000200:	08000228 	.word	0x08000228
 8000204:	08000228 	.word	0x08000228
 8000208:	0800022c 	.word	0x0800022c
 800020c:	08000228 	.word	0x08000228

08000210 <_init>:
 8000210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000212:	46c0      	nop			@ (mov r8, r8)
 8000214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000216:	bc08      	pop	{r3}
 8000218:	469e      	mov	lr, r3
 800021a:	4770      	bx	lr

0800021c <_fini>:
 800021c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800021e:	46c0      	nop			@ (mov r8, r8)
 8000220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000222:	bc08      	pop	{r3}
 8000224:	469e      	mov	lr, r3
 8000226:	4770      	bx	lr
