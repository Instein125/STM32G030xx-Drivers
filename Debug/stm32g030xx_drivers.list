
stm32g030xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000770  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800082c  08000834  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800082c  0800082c  00001834  2**0
                  CONTENTS
  4 .ARM          00000000  0800082c  0800082c  00001834  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800082c  08000834  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800082c  0800082c  0000182c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000830  08000830  00001830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001834  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000834  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000834  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00001834  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b3a  00000000  00000000  0000185c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000024c  00000000  00000000  00002396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  000025e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  000026a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00000ca0  00000000  00000000  0000272d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00000522  00000000  00000000  000033cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000038ef  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000020c  00000000  00000000  00003934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000073  00000000  00000000  00003b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08000814 	.word	0x08000814

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	08000814 	.word	0x08000814

08000104 <GPIO_Init>:
/**
 * @brief  Initializes the GPIO pin with the specified configuration.
 * @param  pGPIOHandle: Pointer to the GPIO handle structure containing the configuration.
 * @retval None
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle){
 8000104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000106:	b087      	sub	sp, #28
 8000108:	af00      	add	r7, sp, #0
 800010a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; // Temporary register variable
 800010c:	2300      	movs	r3, #0
 800010e:	617b      	str	r3, [r7, #20]

	// Configure GPIO Mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode <= GPIO_MODE_ANALOG) {
 8000110:	687b      	ldr	r3, [r7, #4]
 8000112:	795b      	ldrb	r3, [r3, #5]
 8000114:	2b03      	cmp	r3, #3
 8000116:	d820      	bhi.n	800015a <GPIO_Init+0x56>
		// Non-interrupt mode (Input, Output, Alternate Function, Analog)
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000118:	687b      	ldr	r3, [r7, #4]
 800011a:	795b      	ldrb	r3, [r3, #5]
 800011c:	001a      	movs	r2, r3
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800011e:	687b      	ldr	r3, [r7, #4]
 8000120:	791b      	ldrb	r3, [r3, #4]
 8000122:	005b      	lsls	r3, r3, #1
 8000124:	409a      	lsls	r2, r3
 8000126:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Mode
 8000128:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800012a:	687b      	ldr	r3, [r7, #4]
 800012c:	681b      	ldr	r3, [r3, #0]
 800012e:	681a      	ldr	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear MODER bits
 8000130:	687b      	ldr	r3, [r7, #4]
 8000132:	791b      	ldrb	r3, [r3, #4]
 8000134:	005b      	lsls	r3, r3, #1
 8000136:	2103      	movs	r1, #3
 8000138:	4099      	lsls	r1, r3
 800013a:	000b      	movs	r3, r1
		pGPIOHandle->pGPIOx->MODER &= ~(0x3
 800013c:	43db      	mvns	r3, r3
 800013e:	0019      	movs	r1, r3
 8000140:	687b      	ldr	r3, [r7, #4]
 8000142:	681b      	ldr	r3, [r3, #0]
 8000144:	400a      	ands	r2, r1
 8000146:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; // Set new mode
 8000148:	687b      	ldr	r3, [r7, #4]
 800014a:	681b      	ldr	r3, [r3, #0]
 800014c:	6819      	ldr	r1, [r3, #0]
 800014e:	687b      	ldr	r3, [r7, #4]
 8000150:	681b      	ldr	r3, [r3, #0]
 8000152:	697a      	ldr	r2, [r7, #20]
 8000154:	430a      	orrs	r2, r1
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	e0cd      	b.n	80002f6 <GPIO_Init+0x1f2>
	} else {
		// Interrupt mode (to be implemented)
		// Configure the MODER register to input mode for the corresponding pin
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	681b      	ldr	r3, [r3, #0]
 800015e:	681a      	ldr	r2, [r3, #0]
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	791b      	ldrb	r3, [r3, #4]
 8000164:	005b      	lsls	r3, r3, #1
 8000166:	2103      	movs	r1, #3
 8000168:	4099      	lsls	r1, r3
 800016a:	000b      	movs	r3, r1
 800016c:	43db      	mvns	r3, r3
 800016e:	0019      	movs	r1, r3
 8000170:	687b      	ldr	r3, [r7, #4]
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	400a      	ands	r2, r1
 8000176:	601a      	str	r2, [r3, #0]

		if(pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_FT){
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	795b      	ldrb	r3, [r3, #5]
 800017c:	2b04      	cmp	r3, #4
 800017e:	d117      	bne.n	80001b0 <GPIO_Init+0xac>
			//1. Config FTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000180:	4ba8      	ldr	r3, [pc, #672]	@ (8000424 <GPIO_Init+0x320>)
 8000182:	685a      	ldr	r2, [r3, #4]
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	0019      	movs	r1, r3
 800018a:	2301      	movs	r3, #1
 800018c:	408b      	lsls	r3, r1
 800018e:	0019      	movs	r1, r3
 8000190:	4ba4      	ldr	r3, [pc, #656]	@ (8000424 <GPIO_Init+0x320>)
 8000192:	430a      	orrs	r2, r1
 8000194:	605a      	str	r2, [r3, #4]
			// Clear the corresponding RTSR bit as We want the falling edge so to make sure
			EXTI->RTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000196:	4ba3      	ldr	r3, [pc, #652]	@ (8000424 <GPIO_Init+0x320>)
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	791b      	ldrb	r3, [r3, #4]
 800019e:	0019      	movs	r1, r3
 80001a0:	2301      	movs	r3, #1
 80001a2:	408b      	lsls	r3, r1
 80001a4:	43db      	mvns	r3, r3
 80001a6:	0019      	movs	r1, r3
 80001a8:	4b9e      	ldr	r3, [pc, #632]	@ (8000424 <GPIO_Init+0x320>)
 80001aa:	400a      	ands	r2, r1
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	e035      	b.n	800021c <GPIO_Init+0x118>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_RT){
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	795b      	ldrb	r3, [r3, #5]
 80001b4:	2b05      	cmp	r3, #5
 80001b6:	d117      	bne.n	80001e8 <GPIO_Init+0xe4>
			//1. Config RTSR
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001b8:	4b9a      	ldr	r3, [pc, #616]	@ (8000424 <GPIO_Init+0x320>)
 80001ba:	681a      	ldr	r2, [r3, #0]
 80001bc:	687b      	ldr	r3, [r7, #4]
 80001be:	791b      	ldrb	r3, [r3, #4]
 80001c0:	0019      	movs	r1, r3
 80001c2:	2301      	movs	r3, #1
 80001c4:	408b      	lsls	r3, r1
 80001c6:	0019      	movs	r1, r3
 80001c8:	4b96      	ldr	r3, [pc, #600]	@ (8000424 <GPIO_Init+0x320>)
 80001ca:	430a      	orrs	r2, r1
 80001cc:	601a      	str	r2, [r3, #0]
			EXTI->FTSR1 &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001ce:	4b95      	ldr	r3, [pc, #596]	@ (8000424 <GPIO_Init+0x320>)
 80001d0:	685a      	ldr	r2, [r3, #4]
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	791b      	ldrb	r3, [r3, #4]
 80001d6:	0019      	movs	r1, r3
 80001d8:	2301      	movs	r3, #1
 80001da:	408b      	lsls	r3, r1
 80001dc:	43db      	mvns	r3, r3
 80001de:	0019      	movs	r1, r3
 80001e0:	4b90      	ldr	r3, [pc, #576]	@ (8000424 <GPIO_Init+0x320>)
 80001e2:	400a      	ands	r2, r1
 80001e4:	605a      	str	r2, [r3, #4]
 80001e6:	e019      	b.n	800021c <GPIO_Init+0x118>
		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_INT_RFT){
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	795b      	ldrb	r3, [r3, #5]
 80001ec:	2b06      	cmp	r3, #6
 80001ee:	d115      	bne.n	800021c <GPIO_Init+0x118>
			//1. Config FTSR and RTSR
			EXTI->FTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80001f0:	4b8c      	ldr	r3, [pc, #560]	@ (8000424 <GPIO_Init+0x320>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	791b      	ldrb	r3, [r3, #4]
 80001f8:	0019      	movs	r1, r3
 80001fa:	2301      	movs	r3, #1
 80001fc:	408b      	lsls	r3, r1
 80001fe:	0019      	movs	r1, r3
 8000200:	4b88      	ldr	r3, [pc, #544]	@ (8000424 <GPIO_Init+0x320>)
 8000202:	430a      	orrs	r2, r1
 8000204:	605a      	str	r2, [r3, #4]
			EXTI->RTSR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000206:	4b87      	ldr	r3, [pc, #540]	@ (8000424 <GPIO_Init+0x320>)
 8000208:	681a      	ldr	r2, [r3, #0]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	791b      	ldrb	r3, [r3, #4]
 800020e:	0019      	movs	r1, r3
 8000210:	2301      	movs	r3, #1
 8000212:	408b      	lsls	r3, r1
 8000214:	0019      	movs	r1, r3
 8000216:	4b83      	ldr	r3, [pc, #524]	@ (8000424 <GPIO_Init+0x320>)
 8000218:	430a      	orrs	r2, r1
 800021a:	601a      	str	r2, [r3, #0]
		}

	    // 2. Configure the GPIO port selection in EXTI register
	    uint8_t exti_idx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4; // EXTICR index (each EXTICR covers 4 pins)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	791a      	ldrb	r2, [r3, #4]
 8000220:	2313      	movs	r3, #19
 8000222:	18fb      	adds	r3, r7, r3
 8000224:	0892      	lsrs	r2, r2, #2
 8000226:	701a      	strb	r2, [r3, #0]
	    uint8_t exti_shift = (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4) * 8; // Shift for the specific pin
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	791b      	ldrb	r3, [r3, #4]
 800022c:	2203      	movs	r2, #3
 800022e:	4013      	ands	r3, r2
 8000230:	b2da      	uxtb	r2, r3
 8000232:	2312      	movs	r3, #18
 8000234:	18fb      	adds	r3, r7, r3
 8000236:	00d2      	lsls	r2, r2, #3
 8000238:	701a      	strb	r2, [r3, #0]
	    uint8_t gpio_port_code = GPIO_BASE_TO_PORT_CODE(pGPIOHandle->pGPIOx);
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	23a0      	movs	r3, #160	@ 0xa0
 8000240:	05db      	lsls	r3, r3, #23
 8000242:	429a      	cmp	r2, r3
 8000244:	d01d      	beq.n	8000282 <GPIO_Init+0x17e>
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	4a77      	ldr	r2, [pc, #476]	@ (8000428 <GPIO_Init+0x324>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d016      	beq.n	800027e <GPIO_Init+0x17a>
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a75      	ldr	r2, [pc, #468]	@ (800042c <GPIO_Init+0x328>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d00f      	beq.n	800027a <GPIO_Init+0x176>
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a74      	ldr	r2, [pc, #464]	@ (8000430 <GPIO_Init+0x32c>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d008      	beq.n	8000276 <GPIO_Init+0x172>
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a72      	ldr	r2, [pc, #456]	@ (8000434 <GPIO_Init+0x330>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d101      	bne.n	8000272 <GPIO_Init+0x16e>
 800026e:	2305      	movs	r3, #5
 8000270:	e008      	b.n	8000284 <GPIO_Init+0x180>
 8000272:	23ff      	movs	r3, #255	@ 0xff
 8000274:	e006      	b.n	8000284 <GPIO_Init+0x180>
 8000276:	2303      	movs	r3, #3
 8000278:	e004      	b.n	8000284 <GPIO_Init+0x180>
 800027a:	2302      	movs	r3, #2
 800027c:	e002      	b.n	8000284 <GPIO_Init+0x180>
 800027e:	2301      	movs	r3, #1
 8000280:	e000      	b.n	8000284 <GPIO_Init+0x180>
 8000282:	2300      	movs	r3, #0
 8000284:	2511      	movs	r5, #17
 8000286:	197a      	adds	r2, r7, r5
 8000288:	7013      	strb	r3, [r2, #0]

	    // Update the corresponding EXTICR register (EXTICR1 - EXTICR4)
		EXTI->EXTICR[exti_idx] &= ~(0xFF << exti_shift); // Clear existing bits
 800028a:	4a66      	ldr	r2, [pc, #408]	@ (8000424 <GPIO_Init+0x320>)
 800028c:	2413      	movs	r4, #19
 800028e:	193b      	adds	r3, r7, r4
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	3318      	adds	r3, #24
 8000294:	009b      	lsls	r3, r3, #2
 8000296:	589a      	ldr	r2, [r3, r2]
 8000298:	2612      	movs	r6, #18
 800029a:	19bb      	adds	r3, r7, r6
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	21ff      	movs	r1, #255	@ 0xff
 80002a0:	4099      	lsls	r1, r3
 80002a2:	000b      	movs	r3, r1
 80002a4:	43db      	mvns	r3, r3
 80002a6:	0018      	movs	r0, r3
 80002a8:	495e      	ldr	r1, [pc, #376]	@ (8000424 <GPIO_Init+0x320>)
 80002aa:	193b      	adds	r3, r7, r4
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	4002      	ands	r2, r0
 80002b0:	3318      	adds	r3, #24
 80002b2:	009b      	lsls	r3, r3, #2
 80002b4:	505a      	str	r2, [r3, r1]
		EXTI->EXTICR[exti_idx] |= (gpio_port_code << exti_shift); // Set the new port code
 80002b6:	4a5b      	ldr	r2, [pc, #364]	@ (8000424 <GPIO_Init+0x320>)
 80002b8:	193b      	adds	r3, r7, r4
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	3318      	adds	r3, #24
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	589a      	ldr	r2, [r3, r2]
 80002c2:	197b      	adds	r3, r7, r5
 80002c4:	7819      	ldrb	r1, [r3, #0]
 80002c6:	19bb      	adds	r3, r7, r6
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	4099      	lsls	r1, r3
 80002cc:	000b      	movs	r3, r1
 80002ce:	0018      	movs	r0, r3
 80002d0:	4954      	ldr	r1, [pc, #336]	@ (8000424 <GPIO_Init+0x320>)
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	4302      	orrs	r2, r0
 80002d8:	3318      	adds	r3, #24
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	505a      	str	r2, [r3, r1]


		//3. Enable the EXTI interrupt delivery using the IMR(Interrupt Mask Register)
		EXTI->IMR1 |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80002de:	4a51      	ldr	r2, [pc, #324]	@ (8000424 <GPIO_Init+0x320>)
 80002e0:	2380      	movs	r3, #128	@ 0x80
 80002e2:	58d3      	ldr	r3, [r2, r3]
 80002e4:	687a      	ldr	r2, [r7, #4]
 80002e6:	7912      	ldrb	r2, [r2, #4]
 80002e8:	0011      	movs	r1, r2
 80002ea:	2201      	movs	r2, #1
 80002ec:	408a      	lsls	r2, r1
 80002ee:	494d      	ldr	r1, [pc, #308]	@ (8000424 <GPIO_Init+0x320>)
 80002f0:	4313      	orrs	r3, r2
 80002f2:	2280      	movs	r2, #128	@ 0x80
 80002f4:	508b      	str	r3, [r1, r2]
	}
	temp = 0;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

	// Configure GPIO Output Type
	if (pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_OUTPUT) {
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	795b      	ldrb	r3, [r3, #5]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d11d      	bne.n	800033e <GPIO_Init+0x23a>
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	7a1b      	ldrb	r3, [r3, #8]
 8000306:	001a      	movs	r2, r3
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	791b      	ldrb	r3, [r3, #4]
 800030c:	409a      	lsls	r2, r3
 800030e:	0013      	movs	r3, r2
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_OpType
 8000310:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	685a      	ldr	r2, [r3, #4]
				<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); // Clear OTYPER bit
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	791b      	ldrb	r3, [r3, #4]
 800031c:	0019      	movs	r1, r3
 800031e:	2301      	movs	r3, #1
 8000320:	408b      	lsls	r3, r1
		pGPIOHandle->pGPIOx->OTYPER &= ~(0x1
 8000322:	43db      	mvns	r3, r3
 8000324:	0019      	movs	r1, r3
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	400a      	ands	r2, r1
 800032c:	605a      	str	r2, [r3, #4]
		pGPIOHandle->pGPIOx->OTYPER |= temp; // Set output type
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6859      	ldr	r1, [r3, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	697a      	ldr	r2, [r7, #20]
 800033a:	430a      	orrs	r2, r1
 800033c:	605a      	str	r2, [r3, #4]
	}
	temp = 0;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]

	// Configure GPIO Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	799b      	ldrb	r3, [r3, #6]
 8000346:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	791b      	ldrb	r3, [r3, #4]
 800034c:	005b      	lsls	r3, r3, #1
 800034e:	409a      	lsls	r2, r3
 8000350:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_Speed
 8000352:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689a      	ldr	r2, [r3, #8]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear OSPEEDR bits
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	791b      	ldrb	r3, [r3, #4]
 800035e:	005b      	lsls	r3, r3, #1
 8000360:	2103      	movs	r1, #3
 8000362:	4099      	lsls	r1, r3
 8000364:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3
 8000366:	43db      	mvns	r3, r3
 8000368:	0019      	movs	r1, r3
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	400a      	ands	r2, r1
 8000370:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp; // Set speed
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	6899      	ldr	r1, [r3, #8]
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	430a      	orrs	r2, r1
 8000380:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000382:	2300      	movs	r3, #0
 8000384:	617b      	str	r3, [r7, #20]

	// Configure GPIO Pull-up/Pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	79db      	ldrb	r3, [r3, #7]
 800038a:	001a      	movs	r2, r3
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	791b      	ldrb	r3, [r3, #4]
 8000390:	005b      	lsls	r3, r3, #1
 8000392:	409a      	lsls	r2, r3
 8000394:	0013      	movs	r3, r2
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl
 8000396:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	68da      	ldr	r2, [r3, #12]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); // Clear PUPDR bits
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	791b      	ldrb	r3, [r3, #4]
 80003a2:	005b      	lsls	r3, r3, #1
 80003a4:	2103      	movs	r1, #3
 80003a6:	4099      	lsls	r1, r3
 80003a8:	000b      	movs	r3, r1
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	0019      	movs	r1, r3
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	400a      	ands	r2, r1
 80003b4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp; // Set pull-up/pull-down configuration
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	68d9      	ldr	r1, [r3, #12]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	697a      	ldr	r2, [r7, #20]
 80003c2:	430a      	orrs	r2, r1
 80003c4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]

	// Configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_Mode == GPIO_MODE_AF){
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	2b02      	cmp	r3, #2
 80003d0:	d124      	bne.n	800041c <GPIO_Init+0x318>
		uint8_t regIdx, pinPos;
		regIdx = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791a      	ldrb	r2, [r3, #4]
 80003d6:	2410      	movs	r4, #16
 80003d8:	193b      	adds	r3, r7, r4
 80003da:	08d2      	lsrs	r2, r2, #3
 80003dc:	701a      	strb	r2, [r3, #0]
		pinPos = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	791a      	ldrb	r2, [r3, #4]
 80003e2:	200f      	movs	r0, #15
 80003e4:	183b      	adds	r3, r7, r0
 80003e6:	2107      	movs	r1, #7
 80003e8:	400a      	ands	r2, r1
 80003ea:	701a      	strb	r2, [r3, #0]
		pGPIOHandle->pGPIOx->AFR[regIdx] |= (pGPIOHandle->GPIO_PinConfig.GPIO_AltFunction << (4 * pinPos));
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	193a      	adds	r2, r7, r4
 80003f2:	7812      	ldrb	r2, [r2, #0]
 80003f4:	3208      	adds	r2, #8
 80003f6:	0092      	lsls	r2, r2, #2
 80003f8:	58d1      	ldr	r1, [r2, r3]
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	7a5b      	ldrb	r3, [r3, #9]
 80003fe:	001a      	movs	r2, r3
 8000400:	183b      	adds	r3, r7, r0
 8000402:	781b      	ldrb	r3, [r3, #0]
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	409a      	lsls	r2, r3
 8000408:	0013      	movs	r3, r2
 800040a:	0018      	movs	r0, r3
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	193a      	adds	r2, r7, r4
 8000412:	7812      	ldrb	r2, [r2, #0]
 8000414:	4301      	orrs	r1, r0
 8000416:	3208      	adds	r2, #8
 8000418:	0092      	lsls	r2, r2, #2
 800041a:	50d1      	str	r1, [r2, r3]
	}
}
 800041c:	46c0      	nop			@ (mov r8, r8)
 800041e:	46bd      	mov	sp, r7
 8000420:	b007      	add	sp, #28
 8000422:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000424:	40021800 	.word	0x40021800
 8000428:	50000400 	.word	0x50000400
 800042c:	50000800 	.word	0x50000800
 8000430:	50000c00 	.word	0x50000c00
 8000434:	50001400 	.word	0x50001400

08000438 <GPIO_PeriClkCtrl>:
 * @brief  Enables or disables the clock for the specified GPIO peripheral.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  en: Enable/disable flag (1 to enable, 0 to disable).
 * @retval None
 */
void GPIO_PeriClkCtrl(GPIO_RegDef_t *pGPIOx, uint8_t en){
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	000a      	movs	r2, r1
 8000442:	1cfb      	adds	r3, r7, #3
 8000444:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 8000446:	1cfb      	adds	r3, r7, #3
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b01      	cmp	r3, #1
 800044c:	d137      	bne.n	80004be <GPIO_PeriClkCtrl+0x86>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_EN();
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	23a0      	movs	r3, #160	@ 0xa0
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	429a      	cmp	r2, r3
 8000456:	d106      	bne.n	8000466 <GPIO_PeriClkCtrl+0x2e>
 8000458:	4b36      	ldr	r3, [pc, #216]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 800045a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800045c:	4b35      	ldr	r3, [pc, #212]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 800045e:	2101      	movs	r1, #1
 8000460:	430a      	orrs	r2, r1
 8000462:	635a      	str	r2, [r3, #52]	@ 0x34
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
	}
}
 8000464:	e062      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_EN();
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4a33      	ldr	r2, [pc, #204]	@ (8000538 <GPIO_PeriClkCtrl+0x100>)
 800046a:	4293      	cmp	r3, r2
 800046c:	d106      	bne.n	800047c <GPIO_PeriClkCtrl+0x44>
 800046e:	4b31      	ldr	r3, [pc, #196]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000472:	4b30      	ldr	r3, [pc, #192]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000474:	2102      	movs	r1, #2
 8000476:	430a      	orrs	r2, r1
 8000478:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800047a:	e057      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_EN();
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <GPIO_PeriClkCtrl+0x104>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d106      	bne.n	8000492 <GPIO_PeriClkCtrl+0x5a>
 8000484:	4b2b      	ldr	r3, [pc, #172]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000486:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000488:	4b2a      	ldr	r3, [pc, #168]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 800048a:	2104      	movs	r1, #4
 800048c:	430a      	orrs	r2, r1
 800048e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000490:	e04c      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_EN();
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4a2a      	ldr	r2, [pc, #168]	@ (8000540 <GPIO_PeriClkCtrl+0x108>)
 8000496:	4293      	cmp	r3, r2
 8000498:	d106      	bne.n	80004a8 <GPIO_PeriClkCtrl+0x70>
 800049a:	4b26      	ldr	r3, [pc, #152]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 800049c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800049e:	4b25      	ldr	r3, [pc, #148]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004a0:	2108      	movs	r1, #8
 80004a2:	430a      	orrs	r2, r1
 80004a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004a6:	e041      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_EN();
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	4a26      	ldr	r2, [pc, #152]	@ (8000544 <GPIO_PeriClkCtrl+0x10c>)
 80004ac:	4293      	cmp	r3, r2
 80004ae:	d13d      	bne.n	800052c <GPIO_PeriClkCtrl+0xf4>
 80004b0:	4b20      	ldr	r3, [pc, #128]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004b6:	2120      	movs	r1, #32
 80004b8:	430a      	orrs	r2, r1
 80004ba:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004bc:	e036      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		if(pGPIOx == GPIOA)	GPIOA_PCLK_DI();
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	23a0      	movs	r3, #160	@ 0xa0
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d106      	bne.n	80004d6 <GPIO_PeriClkCtrl+0x9e>
 80004c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004cc:	4b19      	ldr	r3, [pc, #100]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004ce:	2101      	movs	r1, #1
 80004d0:	438a      	bics	r2, r1
 80004d2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004d4:	e02a      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOB) GPIOB_PCLK_DI();
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	4a17      	ldr	r2, [pc, #92]	@ (8000538 <GPIO_PeriClkCtrl+0x100>)
 80004da:	4293      	cmp	r3, r2
 80004dc:	d106      	bne.n	80004ec <GPIO_PeriClkCtrl+0xb4>
 80004de:	4b15      	ldr	r3, [pc, #84]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004e2:	4b14      	ldr	r3, [pc, #80]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004e4:	2102      	movs	r1, #2
 80004e6:	438a      	bics	r2, r1
 80004e8:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80004ea:	e01f      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOC) GPIOC_PCLK_DI();
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	4a13      	ldr	r2, [pc, #76]	@ (800053c <GPIO_PeriClkCtrl+0x104>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d106      	bne.n	8000502 <GPIO_PeriClkCtrl+0xca>
 80004f4:	4b0f      	ldr	r3, [pc, #60]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 80004fa:	2104      	movs	r1, #4
 80004fc:	438a      	bics	r2, r1
 80004fe:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000500:	e014      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOD) GPIOD_PCLK_DI();
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4a0e      	ldr	r2, [pc, #56]	@ (8000540 <GPIO_PeriClkCtrl+0x108>)
 8000506:	4293      	cmp	r3, r2
 8000508:	d106      	bne.n	8000518 <GPIO_PeriClkCtrl+0xe0>
 800050a:	4b0a      	ldr	r3, [pc, #40]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 800050c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000510:	2108      	movs	r1, #8
 8000512:	438a      	bics	r2, r1
 8000514:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000516:	e009      	b.n	800052c <GPIO_PeriClkCtrl+0xf4>
		else if(pGPIOx == GPIOF) GPIOF_PCLK_DI();
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4a0a      	ldr	r2, [pc, #40]	@ (8000544 <GPIO_PeriClkCtrl+0x10c>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d105      	bne.n	800052c <GPIO_PeriClkCtrl+0xf4>
 8000520:	4b04      	ldr	r3, [pc, #16]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <GPIO_PeriClkCtrl+0xfc>)
 8000526:	2120      	movs	r1, #32
 8000528:	438a      	bics	r2, r1
 800052a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800052c:	46c0      	nop			@ (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	b002      	add	sp, #8
 8000532:	bd80      	pop	{r7, pc}
 8000534:	40021000 	.word	0x40021000
 8000538:	50000400 	.word	0x50000400
 800053c:	50000800 	.word	0x50000800
 8000540:	50000c00 	.word	0x50000c00
 8000544:	50001400 	.word	0x50001400

08000548 <GPIO_ToggleOutputPin>:
 * @brief  Toggles the logic level of a specific GPIO pin.
 * @param  pGPIOx: Base address of the GPIO peripheral.
 * @param  pinNum: GPIO pin number (0-15)
 * @retval None
*/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t pinNum){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
 8000550:	000a      	movs	r2, r1
 8000552:	1cfb      	adds	r3, r7, #3
 8000554:	701a      	strb	r2, [r3, #0]
	pGPIOx->ODR ^= (1 << pinNum);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	1cfa      	adds	r2, r7, #3
 800055c:	7812      	ldrb	r2, [r2, #0]
 800055e:	2101      	movs	r1, #1
 8000560:	4091      	lsls	r1, r2
 8000562:	000a      	movs	r2, r1
 8000564:	405a      	eors	r2, r3
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	615a      	str	r2, [r3, #20]
}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	b002      	add	sp, #8
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <GPIO_IRQConfig>:
 * @brief  Configure the GPIO interrupt
 * @param  IRQNum: Interrupt request number
 * @param  en: Enable/Disable flag (1 = ENABLE, 0 = DISABLE)
 * @retval None
 */
void GPIO_IRQConfig(uint8_t IRQNum, uint8_t en){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	0002      	movs	r2, r0
 800057c:	1dfb      	adds	r3, r7, #7
 800057e:	701a      	strb	r2, [r3, #0]
 8000580:	1dbb      	adds	r3, r7, #6
 8000582:	1c0a      	adds	r2, r1, #0
 8000584:	701a      	strb	r2, [r3, #0]
	if(en == ENABLE){
 8000586:	1dbb      	adds	r3, r7, #6
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10b      	bne.n	80005a6 <GPIO_IRQConfig+0x32>
		// Set 1 in NVIC_ISER
		*NVIC_ISER |= (1 << IRQNum);
 800058e:	4b0d      	ldr	r3, [pc, #52]	@ (80005c4 <GPIO_IRQConfig+0x50>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	1dfb      	adds	r3, r7, #7
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	2101      	movs	r1, #1
 8000598:	4099      	lsls	r1, r3
 800059a:	000b      	movs	r3, r1
 800059c:	0019      	movs	r1, r3
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <GPIO_IRQConfig+0x50>)
 80005a0:	430a      	orrs	r2, r1
 80005a2:	601a      	str	r2, [r3, #0]
	} else {
		*NVIC_ICER |= (1 << IRQNum);
	}
}
 80005a4:	e00a      	b.n	80005bc <GPIO_IRQConfig+0x48>
		*NVIC_ICER |= (1 << IRQNum);
 80005a6:	4b08      	ldr	r3, [pc, #32]	@ (80005c8 <GPIO_IRQConfig+0x54>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	1dfb      	adds	r3, r7, #7
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2101      	movs	r1, #1
 80005b0:	4099      	lsls	r1, r3
 80005b2:	000b      	movs	r3, r1
 80005b4:	0019      	movs	r1, r3
 80005b6:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <GPIO_IRQConfig+0x54>)
 80005b8:	430a      	orrs	r2, r1
 80005ba:	601a      	str	r2, [r3, #0]
}
 80005bc:	46c0      	nop			@ (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	b002      	add	sp, #8
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	e000e100 	.word	0xe000e100
 80005c8:	e000e180 	.word	0xe000e180

080005cc <GPIO_IRQPriorityConfig>:
 * @brief  Configure the GPIO interrupt priority
 * @param  IRQNum: Interrupt request number
 * @param  IRQPriority: Priority of the interrupt (0 = highest)
 * @retval None
 */
void GPIO_IRQPriorityConfig(uint8_t IRQNum, uint32_t IRQPriority){
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	0002      	movs	r2, r0
 80005d4:	6039      	str	r1, [r7, #0]
 80005d6:	1dfb      	adds	r3, r7, #7
 80005d8:	701a      	strb	r2, [r3, #0]
	// Make sure that the IRQ priority is within the valid range (0-3 for Cortex-M0+)
	if (IRQPriority < 4) {
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	2b03      	cmp	r3, #3
 80005de:	d827      	bhi.n	8000630 <GPIO_IRQPriorityConfig+0x64>
		// Each register covers 4 interrupt priorities (IRQNum 0-3, 4-7, etc.)
		uint8_t registerIndex = IRQNum / 4;
 80005e0:	200f      	movs	r0, #15
 80005e2:	183b      	adds	r3, r7, r0
 80005e4:	1dfa      	adds	r2, r7, #7
 80005e6:	7812      	ldrb	r2, [r2, #0]
 80005e8:	0892      	lsrs	r2, r2, #2
 80005ea:	701a      	strb	r2, [r3, #0]
		uint8_t iprx_section = (IRQNum % 4);
 80005ec:	240e      	movs	r4, #14
 80005ee:	193b      	adds	r3, r7, r4
 80005f0:	1dfa      	adds	r2, r7, #7
 80005f2:	7812      	ldrb	r2, [r2, #0]
 80005f4:	2103      	movs	r1, #3
 80005f6:	400a      	ands	r2, r1
 80005f8:	701a      	strb	r2, [r3, #0]

		uint8_t shift_amt = (8*iprx_section) + (8-2);
 80005fa:	193b      	adds	r3, r7, r4
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	00db      	lsls	r3, r3, #3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	240d      	movs	r4, #13
 8000604:	193b      	adds	r3, r7, r4
 8000606:	3206      	adds	r2, #6
 8000608:	701a      	strb	r2, [r3, #0]

		*(NVIC_IPR + (registerIndex)) |= IRQPriority << shift_amt;
 800060a:	183b      	adds	r3, r7, r0
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <GPIO_IRQPriorityConfig+0x6c>)
 8000612:	4694      	mov	ip, r2
 8000614:	4463      	add	r3, ip
 8000616:	6819      	ldr	r1, [r3, #0]
 8000618:	193b      	adds	r3, r7, r4
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	683a      	ldr	r2, [r7, #0]
 800061e:	409a      	lsls	r2, r3
 8000620:	183b      	adds	r3, r7, r0
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	4804      	ldr	r0, [pc, #16]	@ (8000638 <GPIO_IRQPriorityConfig+0x6c>)
 8000628:	4684      	mov	ip, r0
 800062a:	4463      	add	r3, ip
 800062c:	430a      	orrs	r2, r1
 800062e:	601a      	str	r2, [r3, #0]
	}
}
 8000630:	46c0      	nop			@ (mov r8, r8)
 8000632:	46bd      	mov	sp, r7
 8000634:	b005      	add	sp, #20
 8000636:	bd90      	pop	{r4, r7, pc}
 8000638:	e000e400 	.word	0xe000e400

0800063c <GPIO_IRQHandling>:
/**
 * @brief  Handle the GPIO interrupt
 * @param  pinNum: GPIO pin number that triggered the interrupt
 * @retval None
 */
void GPIO_IRQHandling(uint8_t pinNum){
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	0002      	movs	r2, r0
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	701a      	strb	r2, [r3, #0]
	// Check if the interrupt was triggered on the falling edge
    if(EXTI->FPR1 & (1 << pinNum)) {
 8000648:	4b10      	ldr	r3, [pc, #64]	@ (800068c <GPIO_IRQHandling+0x50>)
 800064a:	691b      	ldr	r3, [r3, #16]
 800064c:	1dfa      	adds	r2, r7, #7
 800064e:	7812      	ldrb	r2, [r2, #0]
 8000650:	2101      	movs	r1, #1
 8000652:	4091      	lsls	r1, r2
 8000654:	000a      	movs	r2, r1
 8000656:	4013      	ands	r3, r2
 8000658:	d005      	beq.n	8000666 <GPIO_IRQHandling+0x2a>
    	EXTI->FPR1 = (1 << pinNum);  // Clear the falling edge pending flag for the specific pin
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	2201      	movs	r2, #1
 8000660:	409a      	lsls	r2, r3
 8000662:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <GPIO_IRQHandling+0x50>)
 8000664:	611a      	str	r2, [r3, #16]
    }

    // Check if the interrupt was triggered on the rising edge
    if(EXTI->RPR1 & (1 << pinNum)) {
 8000666:	4b09      	ldr	r3, [pc, #36]	@ (800068c <GPIO_IRQHandling+0x50>)
 8000668:	68db      	ldr	r3, [r3, #12]
 800066a:	1dfa      	adds	r2, r7, #7
 800066c:	7812      	ldrb	r2, [r2, #0]
 800066e:	2101      	movs	r1, #1
 8000670:	4091      	lsls	r1, r2
 8000672:	000a      	movs	r2, r1
 8000674:	4013      	ands	r3, r2
 8000676:	d005      	beq.n	8000684 <GPIO_IRQHandling+0x48>
    	EXTI->RPR1 = (1 << pinNum);  // Clear the rising edge pending flag for the specific pin
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2201      	movs	r2, #1
 800067e:	409a      	lsls	r2, r3
 8000680:	4b02      	ldr	r3, [pc, #8]	@ (800068c <GPIO_IRQHandling+0x50>)
 8000682:	60da      	str	r2, [r3, #12]
    }
}
 8000684:	46c0      	nop			@ (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b002      	add	sp, #8
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021800 	.word	0x40021800

08000690 <EXTI4_15_IRQHandler>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void EXTI4_15_IRQHandler(void){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	GPIO_IRQHandling(GPIO_PIN_NO_12);
 8000694:	200c      	movs	r0, #12
 8000696:	f7ff ffd1 	bl	800063c <GPIO_IRQHandling>
	GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_3);
 800069a:	4b04      	ldr	r3, [pc, #16]	@ (80006ac <EXTI4_15_IRQHandler+0x1c>)
 800069c:	2103      	movs	r1, #3
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ff52 	bl	8000548 <GPIO_ToggleOutputPin>
}
 80006a4:	46c0      	nop			@ (mov r8, r8)
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	50000400 	.word	0x50000400

080006b0 <main>:


int main(void){
 80006b0:	b590      	push	{r4, r7, lr}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0

	GPIO_Handle_t GpioLed;
	memset(&GpioLed, 0, sizeof(GpioLed));
 80006b6:	240c      	movs	r4, #12
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	220c      	movs	r2, #12
 80006bc:	2100      	movs	r1, #0
 80006be:	0018      	movs	r0, r3
 80006c0:	f000 f87b 	bl	80007ba <memset>

	SYSCFG_PCLK_EN();
 80006c4:	4b26      	ldr	r3, [pc, #152]	@ (8000760 <main+0xb0>)
 80006c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80006c8:	4b25      	ldr	r3, [pc, #148]	@ (8000760 <main+0xb0>)
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	641a      	str	r2, [r3, #64]	@ 0x40

 	GpioLed.pGPIOx = GPIOB;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	4a24      	ldr	r2, [pc, #144]	@ (8000764 <main+0xb4>)
 80006d4:	601a      	str	r2, [r3, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2203      	movs	r2, #3
 80006da:	711a      	strb	r2, [r3, #4]
	GpioLed.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_OUTPUT;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	715a      	strb	r2, [r3, #5]
	GpioLed.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_MEDIUM;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2201      	movs	r2, #1
 80006e6:	719a      	strb	r2, [r3, #6]
	GpioLed.GPIO_PinConfig.GPIO_OpType = GPIO_OP_TYPE_PP;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2200      	movs	r2, #0
 80006ec:	721a      	strb	r2, [r3, #8]
	GpioLed.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2200      	movs	r2, #0
 80006f2:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClkCtrl(GPIOB, ENABLE);
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <main+0xb4>)
 80006f6:	2101      	movs	r1, #1
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff fe9d 	bl	8000438 <GPIO_PeriClkCtrl>
	GPIO_Init(&GpioLed);
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff fcff 	bl	8000104 <GPIO_Init>


	GPIO_Handle_t GpioButton;
	memset(&GpioButton, 0, sizeof(GpioButton));
 8000706:	003b      	movs	r3, r7
 8000708:	220c      	movs	r2, #12
 800070a:	2100      	movs	r1, #0
 800070c:	0018      	movs	r0, r3
 800070e:	f000 f854 	bl	80007ba <memset>

	GpioButton.pGPIOx = GPIOA;
 8000712:	003b      	movs	r3, r7
 8000714:	22a0      	movs	r2, #160	@ 0xa0
 8000716:	05d2      	lsls	r2, r2, #23
 8000718:	601a      	str	r2, [r3, #0]
	GpioButton.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800071a:	003b      	movs	r3, r7
 800071c:	220c      	movs	r2, #12
 800071e:	711a      	strb	r2, [r3, #4]
	GpioButton.GPIO_PinConfig.GPIO_Mode = GPIO_MODE_INT_RT;
 8000720:	003b      	movs	r3, r7
 8000722:	2205      	movs	r2, #5
 8000724:	715a      	strb	r2, [r3, #5]
	GpioButton.GPIO_PinConfig.GPIO_Speed = GPIO_SPEED_VHIGH;
 8000726:	003b      	movs	r3, r7
 8000728:	2203      	movs	r2, #3
 800072a:	719a      	strb	r2, [r3, #6]
	GpioButton.GPIO_PinConfig.GPIO_OpType = GPIO_OP_TYPE_PP;
 800072c:	003b      	movs	r3, r7
 800072e:	2200      	movs	r2, #0
 8000730:	721a      	strb	r2, [r3, #8]
	GpioButton.GPIO_PinConfig.GPIO_PuPdControl = GPIO_PULL_DOWN;
 8000732:	003b      	movs	r3, r7
 8000734:	2202      	movs	r2, #2
 8000736:	71da      	strb	r2, [r3, #7]

	GPIO_PeriClkCtrl(GPIOA, ENABLE);
 8000738:	23a0      	movs	r3, #160	@ 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2101      	movs	r1, #1
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fe7a 	bl	8000438 <GPIO_PeriClkCtrl>
	GPIO_Init(&GpioButton);
 8000744:	003b      	movs	r3, r7
 8000746:	0018      	movs	r0, r3
 8000748:	f7ff fcdc 	bl	8000104 <GPIO_Init>

	GPIO_IRQPriorityConfig(EXTI4_15_IRQn, NVIC_IRQ_PRIORITY_3);
 800074c:	2103      	movs	r1, #3
 800074e:	2007      	movs	r0, #7
 8000750:	f7ff ff3c 	bl	80005cc <GPIO_IRQPriorityConfig>
	GPIO_IRQConfig(EXTI4_15_IRQn, ENABLE);
 8000754:	2101      	movs	r1, #1
 8000756:	2007      	movs	r0, #7
 8000758:	f7ff ff0c 	bl	8000574 <GPIO_IRQConfig>

	while(1);
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	e7fd      	b.n	800075c <main+0xac>
 8000760:	40021000 	.word	0x40021000
 8000764:	50000400 	.word	0x50000400

08000768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000768:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800076a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800076c:	e000      	b.n	8000770 <Reset_Handler+0x8>
 800076e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000770:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000772:	490d      	ldr	r1, [pc, #52]	@ (80007a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000774:	4a0d      	ldr	r2, [pc, #52]	@ (80007ac <LoopForever+0xe>)
  movs r3, #0
 8000776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000778:	e002      	b.n	8000780 <LoopCopyDataInit>

0800077a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800077a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800077c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800077e:	3304      	adds	r3, #4

08000780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000784:	d3f9      	bcc.n	800077a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000786:	4a0a      	ldr	r2, [pc, #40]	@ (80007b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000788:	4c0a      	ldr	r4, [pc, #40]	@ (80007b4 <LoopForever+0x16>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800078c:	e001      	b.n	8000792 <LoopFillZerobss>

0800078e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800078e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000790:	3204      	adds	r2, #4

08000792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000794:	d3fb      	bcc.n	800078e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000796:	f000 f819 	bl	80007cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800079a:	f7ff ff89 	bl	80006b0 <main>

0800079e <LoopForever>:

LoopForever:
  b LoopForever
 800079e:	e7fe      	b.n	800079e <LoopForever>
  ldr   r0, =_estack
 80007a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80007a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007ac:	08000834 	.word	0x08000834
  ldr r2, =_sbss
 80007b0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007b4:	2000001c 	.word	0x2000001c

080007b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b8:	e7fe      	b.n	80007b8 <ADC_IRQHandler>

080007ba <memset>:
 80007ba:	0003      	movs	r3, r0
 80007bc:	1882      	adds	r2, r0, r2
 80007be:	4293      	cmp	r3, r2
 80007c0:	d100      	bne.n	80007c4 <memset+0xa>
 80007c2:	4770      	bx	lr
 80007c4:	7019      	strb	r1, [r3, #0]
 80007c6:	3301      	adds	r3, #1
 80007c8:	e7f9      	b.n	80007be <memset+0x4>
	...

080007cc <__libc_init_array>:
 80007cc:	b570      	push	{r4, r5, r6, lr}
 80007ce:	2600      	movs	r6, #0
 80007d0:	4c0c      	ldr	r4, [pc, #48]	@ (8000804 <__libc_init_array+0x38>)
 80007d2:	4d0d      	ldr	r5, [pc, #52]	@ (8000808 <__libc_init_array+0x3c>)
 80007d4:	1b64      	subs	r4, r4, r5
 80007d6:	10a4      	asrs	r4, r4, #2
 80007d8:	42a6      	cmp	r6, r4
 80007da:	d109      	bne.n	80007f0 <__libc_init_array+0x24>
 80007dc:	2600      	movs	r6, #0
 80007de:	f000 f819 	bl	8000814 <_init>
 80007e2:	4c0a      	ldr	r4, [pc, #40]	@ (800080c <__libc_init_array+0x40>)
 80007e4:	4d0a      	ldr	r5, [pc, #40]	@ (8000810 <__libc_init_array+0x44>)
 80007e6:	1b64      	subs	r4, r4, r5
 80007e8:	10a4      	asrs	r4, r4, #2
 80007ea:	42a6      	cmp	r6, r4
 80007ec:	d105      	bne.n	80007fa <__libc_init_array+0x2e>
 80007ee:	bd70      	pop	{r4, r5, r6, pc}
 80007f0:	00b3      	lsls	r3, r6, #2
 80007f2:	58eb      	ldr	r3, [r5, r3]
 80007f4:	4798      	blx	r3
 80007f6:	3601      	adds	r6, #1
 80007f8:	e7ee      	b.n	80007d8 <__libc_init_array+0xc>
 80007fa:	00b3      	lsls	r3, r6, #2
 80007fc:	58eb      	ldr	r3, [r5, r3]
 80007fe:	4798      	blx	r3
 8000800:	3601      	adds	r6, #1
 8000802:	e7f2      	b.n	80007ea <__libc_init_array+0x1e>
 8000804:	0800082c 	.word	0x0800082c
 8000808:	0800082c 	.word	0x0800082c
 800080c:	08000830 	.word	0x08000830
 8000810:	0800082c 	.word	0x0800082c

08000814 <_init>:
 8000814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800081a:	bc08      	pop	{r3}
 800081c:	469e      	mov	lr, r3
 800081e:	4770      	bx	lr

08000820 <_fini>:
 8000820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000826:	bc08      	pop	{r3}
 8000828:	469e      	mov	lr, r3
 800082a:	4770      	bx	lr
